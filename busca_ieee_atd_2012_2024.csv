"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Impact of Architectural Technical Debt on Daily Software Development Work — A Survey of Software Practitioners","T. Besker; A. Martini; J. Bosch","Computer Science and Engineering, Chalmers University of Technology, Göteborg, Sweden; Computer Science and Engineering, Chalmers University of Technology, Göteborg, Sweden; Computer Science and Engineering, Chalmers University of Technology, Göteborg, Sweden","2017 43rd Euromicro Conference on Software Engineering and Advanced Applications (SEAA)","28 Sep 2017","2017","","","278","287","The negative consequences of Technical Debt is an area of increasing interest, and more specifically the Architectural aspects of it have received increased attention in the last few years. Besides the negative effects of Architectural Technical Debt on the overall software product quality in terms of hindering evolution and causing high maintenance costs, Architectural Technical Debt also has a significant negative impact on software practitioners' daily work. Although a great deal of theoretical work on Architectural Technical Debt has been undertaken, there is a lack of empirical studies that examine the negative effects of Architectural Technical Debt during the software development lifecycle. The aim of this study is to investigate how practitioners perceive and estimate the impact of Architectural Technical Debt during the software development process. This paper reports the results of an online web survey providing quantitative data from 258 participants. The contribution of this paper is threefold: First, it shows that practitioners experience that the Architectural type of Technical Debt has the highest negative impact on daily software development work. Secondly, we provide evidence that does not support the commonly held belief that Architectural Technical Debt increases with the age of the software. Thirdly, we show that despite different responsibilities and working tasks of software professionals, Architectural Technical Debt negatively affects all roles without any significant difference between the roles.","","978-1-5386-2141-7","10.1109/SEAA.2017.16","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8051360","component;Architectural Technical Debt;Wasted time;Software Age;Software Roles;Software Development;Empirical Study;Survey;Quantitative data","Maintenance engineering;Computer architecture;Computer science;Software quality;Industries;Focusing","","4","","37","IEEE","28 Sep 2017","","","IEEE","IEEE Conferences"
"Strategic Management of Technical Debt: Tutorial Synopsis","P. Kruchten","Electrical and Computer Engineering, University of British Columbia, Vancouver, BC, Canada","2012 12th International Conference on Quality Software","4 Oct 2012","2012","","","282","284","The technical debt metaphor acknowledges that software development teams sometimes accept compromises in a system in one dimension (for example, modularity) to meet an urgent demand in some other dimension (for example, a deadline), and that such compromises incur a ""debt"". If not properly managed the interest on this debt may continue to accrue, severely hampering system stability and quality and impacting the team's ability to deliver enhancements at a pace that satisfies business needs. Although unmanaged debt can have disastrous results, strategically managed debt can help businesses and organizations take advantage of time-sensitive opportunities, fulfill market needs and acquire stakeholder feedback. Because architecture has such leverage within the overall development life cycle, strategic management of architectural debt is of primary importance. Some aspects of technical debt - but not all technical debt - affects product quality. This tutorial introduces the technical debt metaphor, the various types of technical debt, and in particular structural or architectural debt, the techniques for measuring and communicating this technical debt, and its relationship with software quality, both internal and external quality.","2332-662X","978-1-4673-2857-9","10.1109/QSIC.2012.17","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6319262","technical debt;software evolution;software architecture","Software;Tutorials;Games;Software engineering;Testing;Measurement;Complexity theory","","8","","19","IEEE","4 Oct 2012","","","IEEE","IEEE Conferences"
"Identifying and visualizing Architectural Debt and its efficiency interest in the automotive domain: A case study","U. Eliasson; A. Martini; R. Kaufmann; S. Odeh","Volvo Car Group, Sweden; Department of Computer Science and Engineering, Chalmers University of Technology | University of Gothenburg; Department of Computer Science and Engineering, Chalmers University of Technology | University of Gothenburg; Department of Computer Science and Engineering, Chalmers University of Technology | University of Gothenburg","2015 IEEE 7th International Workshop on Managing Technical Debt (MTD)","23 Nov 2015","2015","","","33","40","Architectural Technical Debt has recently received the attention of the scientific community, as a suitable metaphor for describing sub-optimal architectural solutions having short-term benefits but causing a long-term negative impact. We study such phenomenon in the context of Volvo Car Group, where the development of modern cars includes complex systems with mechanical components, electronics and software working together in a complicated network to perform an increasing number of functions and meet the demands of many customers. This puts high requirements on having an architecture and design that can handle these demands. Therefore, it is of utmost importance to manage Architecture Technical Debt, in order to make sure that the advantages of sub-optimal solutions do not lead to the payment of a large interest. We conducted a case study at Volvo Car Group and we discovered that architectural violations in the detailed design had an impact on the efficiency of the communication between components, which is an essential quality in cars and other embedded systems. Such interest is not studied in literature, which usually focuses on the maintainability aspects of Technical Debt. To explore how this Architectural Technical Debt and its interest could be communicated to stakeholders, we developed a visual tool. We found that not only was the Architectural Debt highly interesting for the architects and other stakeholders at VCG, but the proposed visualization was useful in increasing the awareness of the impact that Architectural Technical Debt had on efficiency.","","978-1-4673-7378-4","10.1109/MTD.2015.7332622","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7332622","","Software;Visualization;Computer architecture;Stakeholders;Context;Automotive engineering;Complex systems","","9","","18","IEEE","23 Nov 2015","","","IEEE","IEEE Conferences"
"Technical Debt in Hardware Systems and Elements","L. A. Rosser; Z. Ouzzif","Raytheon Intelligence and Space, Richardson, TX; Raytheon Intelligence and Space, Richardson, TX","2021 IEEE Aerospace Conference (50100)","7 Jun 2021","2021","","","1","10","This paper explores the application of the technical debt metaphor to hardware-centric systems. We specifically evaluate how technical debt impacts hardware development and how it can best be handled. Technical debt management can help make better decisions by tracking the debt that is building up in hardware elements and objectively assessing when correcting technical debt items is more cost-effective than allowing them to continue to charge interest in the form of lower productivity and higher risk. Technical debt management has shown great value in the software development field, and recent applications show that the concept can be applied to other engineering disciplines, including systems engineering. There has been less research into technical debt in hardware systems, but many of the same concerns - dependencies, complexity, patterns and conventions, integration, and non-functional requirements - apply. In this paper, we will describe applications of known technical debt types, such as architectural debt, implementation debt, configuration debt, modeling and simulation debt, quality debt, integration debt and testing debt, to hardware centric environments. Then, we will analyze a set of hardware-centric programs for concrete examples of technical debt and their impact. Based on this information, we will expand the definition of System Technical Debt and recommend approaches for identifying, managing, and eliminating technical debt in hardware-centric systems.","1095-323X","978-1-7281-7436-5","10.1109/AERO50100.2021.9438332","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9438332","","Productivity;Conferences;Buildings;Hardware;Software;Complexity theory;Modeling","","2","","17","IEEE","7 Jun 2021","","","IEEE","IEEE Conferences"
"Architectural Technical Debt Identification: Moving Forward","R. Verdecchia","Vrije Universiteit Amsterdam, The Netherlands","2018 IEEE International Conference on Software Architecture Companion (ICSA-C)","13 Aug 2018","2018","","","43","44","Architectural technical debt is a metaphor used to describe sub-optimal architectural design and implementation choices that bring short-term benefits to the cost of the long-term gradual deterioration of the quality of software. Architectural technical debt is an active field of research. Nevertheless, how to accurately identify architectural technical debt is still an open question. Our research aims to fill this gap. We strive to: (i) consolidate the existing knowledge of architectural technical debt identification in practice, (ii) conceive novel identification approaches built upon the existing state of the art techniques and industrial needs, and (iii) provide empirical evidence of architectural technical debt phenomena and assess the viability of the conceived approaches.","","978-1-5386-6585-5","10.1109/ICSA-C.2018.00018","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8432173","Software Architecture;Technical Debt;Software Maintenance","Software architecture;Tools;Software systems;Analytical models;Interviews","","4","","10","IEEE","13 Aug 2018","","","IEEE","IEEE Conferences"
"Strategic Management of Technical Debt: Tutorial at ICSA 2017","P. Kruchten","Electrical and Computer Engineering, University of British Columbia, Vancouver, Canada","2017 IEEE International Conference on Software Architecture Workshops (ICSAW)","26 Jun 2017","2017","","","202","203","The technical debt metaphor acknowledges that software development teams sometimes accept compromises in a system in one dimension (for example, modularity) to meet an urgent demand in some other dimension (for example, a deadline), and that such compromises incur a ""debt"". If not properly managed the interest on this debt may continue to accrue, severely hampering system stability and quality and impacting the team's ability to deliver enhancements at a pace that satisfies business needs. Although unmanaged debt can have disastrous results, strategically managed debt can help businesses and organizations take advantage of time-sensitive opportunities, fulfill market needs and acquire stakeholder feedback. Because architecture has such leverage within the overall development life cycle, strategic management of architectural debt is of primary importance. Some aspects of technical debt-but not all technical debt- affect product quality. This tutorial introduces the technical debt metaphor and the techniques for measuring and communicating this technical debt, integrating it fully with the software development lifecycle.).","","978-1-5090-4793-2","10.1109/ICSAW.2017.40","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7958487","Technical debt;software evolution;maintainability;evolvability","Software;Tutorials;Conferences;Software architecture;Tools;Business;Industries","","","","","IEEE","26 Jun 2017","","","IEEE","IEEE Conferences"
"Applicability of Technical Debt as a Concept to Understand Obstacles for Evolution of Automated Production Systems","B. Vogel-Heuser; S. Rösch","Institute of Automation and Information Systems, Technical University Munich, Munich, Germany; Institute of Automation and Information Systems, Technical University Munich, Munich, Germany","2015 IEEE International Conference on Systems, Man, and Cybernetics","14 Jan 2016","2015","","","127","132","Automated production systems (aPS), a specific class of mechatronic systems, are complex, long living, software intensive, evolving systems designed according to customer request. Often, the evolution of such systems has to cope with imponderables and sudden disturbances of the systematic development or maintenance process. In software engineering, the concept of technical debt and, in more detail, architectural technical debt has been introduced recently to describe phenomena, which increase software development costs over time. This paper tries to adapt and apply the classification of technical debt and architectural technical debt to automated production systems, identifying similar dimensions but adding specific challenges, causes and their effects. Once the causes and effects are identified, management and recovery strategies coping with technical debt and architectural technical debt shall be developed in the future, thereby enlarging the strategies from software engineering. The adapted classification and adaptations are based on the experience of several industrial projects in aPS.","","978-1-4799-8697-2","10.1109/SMC.2015.35","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7379167","automation;software engineering;PLC;IEC 61131-3;technical debt;architectural debt;software and system evolution","Software;Sorting;Software engineering;Sensors;Automation;Companies;Production systems","","16","","22","IEEE","14 Jan 2016","","","IEEE","IEEE Conferences"
"A Systems Perspective on Technical Debt","L. A. Rosser; J. H. Norton","Raytheon Intelligence and Space, Richardson, TX; Raytheon Missiles and Defense, Arlington, VA","2021 IEEE Aerospace Conference (50100)","7 Jun 2021","2021","","","1","10","This paper explores applications of the Technical Debt metaphor, which originated in the agile software community, at a systems level. We present a summary of current understanding of the technical debt concept and propose a broader application of the approach at a system level. The technical debt metaphor provides a method to identify cases when design or implementation decisions are being made for expediency and assess their long term impact on productivity and risk. In addition, technical debt management offers a logical approach to tracking expedient decisions and determining when it makes sense to carry the debt and when it's better to pay it off by updating designed and retrofitting units. In this paper, we describe various kinds of technical debt that may be present in a system baseline and consider how the presence of debt impacts further evolution of the system. Types of debt include architectural debt, configuration debt, testing debt and deprecation debt among others. We also present use case studies that illustrate how technical debt assessment and management can have a positive impact on system realization. Cases include moving a baseline from R&D to operations, reusing a baseline in a new context, and planning a technical refresh. We discuss methods of managing technical debt in a baseline including identification, quantification, tracking and payoff.","1095-323X","978-1-7281-7436-5","10.1109/AERO50100.2021.9438359","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9438359","","Productivity;System realization;Conferences;Software;Planning;Research and development;Testing","","5","","15","IEEE","7 Jun 2021","","","IEEE","IEEE Conferences"
"Technical Debt and the Effect of Agile Software Development Practices on It - An Industry Practitioner Survey","J. Holvitie; V. Leppänen; S. Hyrynsalmi","Department of Information Technology, University of Turku, Turku, Finland; Department of Information Technology, University of Turku, Turku, Finland; Department of Management and Entrepreneurship, University of Turku, Turku, Finland","2014 Sixth International Workshop on Managing Technical Debt","4 Dec 2014","2014","","","35","42","A major reason for the popularity of agile and lean software methods is their capability to function in resource scarce and requirement erratic environments. Both of these characteristics cause accumulation of technical debt, something that is the end result of either intentional or unintentional decisions. The ability of these methods to function with technical debt indicates that they contain components with inherent technical debt management capabilities. This study conducts a survey on industry practitioners to discover what is their level of technical debt knowledge, how does technical debt manifest in their projects and which of the applied components of agile software development -- both processes and practices -- are sensitive to technical debt. This paper contributes to the technical debt discussion by showing differences in assumed and indicated technical debt knowledge. Furthermore, components closest to implementation and its maintenance are perceived to have the most positive effects on technical debt management. Finally, the most encountered instances of technical debt are caused by architectural inadequacies, they are internal legacy, and increase in size as a result of continued implementation.","","978-1-4799-6791-9","10.1109/MTD.2014.8","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6974888","technical debt;agile software development practices;agile software development processes;survey","Software;Agile software development;Industries;Companies;Programming;Standards","","45","","27","IEEE","4 Dec 2014","","","IEEE","IEEE Conferences"
"The Pricey Bill of Technical Debt: When and by Whom will it be Paid?","T. Besker; A. Martini; J. Bosch","Computer Science and Engineering, Chalmers University of Technology, Gothenburg, Sweden; Computer Science and Engineering, Chalmers University of Technology, Gothenburg, Sweden; Computer Science and Engineering, Chalmers University of Technology, Gothenburg, Sweden","2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)","7 Nov 2017","2017","","","13","23","Software companies need to support continuous and fast delivery of customer value both in short and a long-term perspective. However, this can be hindered by evolution limitations and high maintenance efforts due to internal software quality issues by what is described as Technical Debt. Although significant theoretical work has been undertaken to describe the negative effects of Technical Debt, these studies tend to have a weak empirical basis and often lack quantitative data. The aim of this study is to estimate wasted time, caused by the Technical Debt interest during the software life-cycle. This study also investigates how practitioners perceive and estimate the impact of the negative consequences due to Technical Debt during the software development process. This paper reports the results of both an online web-survey provided quantitative data from 258 participants and follow-up interviews with 32 industrial software practitioners. The importance and originality of this study contributes and provides novel insights into the research on Technical Debt by quantifying the perceived interest and the negative effects it has on the software development life-cycle. The findings show that on average, 36% of all development time is estimated to be wasted due to Technical Debt; Complex Architectural Design and Requirement Technical Debt generates most negative effect; and that most time is wasted on understanding and/or measuring the Technical Debt. Moreover, the analysis of the professional roles and the age of the software system in the survey revealed that different roles are affected differently and that the consequences of Technical Debt are also influenced by the age of the software system.","","978-1-5386-0992-7","10.1109/ICSME.2017.42","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8094405","component;Technical Debt;Wasted time;Development Cost;Software Development;Empirical Study;Survey;Qualitative data;Quantitative data","Time measurement;Software systems;Computer science;Companies;Software quality;Interviews","","21","","34","IEEE","7 Nov 2017","","","IEEE","IEEE Conferences"
"Identifying Scalability Debt in Open Systems","G. K. Hanssen; G. Brataas; A. Martini","SINTEF Digital, Trondheim, Norway; SINTEF Digital, Trondheim, Norway; Department of Informatics, University of Oslo, Norway","2019 IEEE/ACM International Conference on Technical Debt (TechDebt)","5 Aug 2019","2019","","","48","52","Architectural technical debt can be generated by changes in the business and the environment of an organization. In this paper, we emphasize the change in scalability requirements due to new regulations. Scalability is the ability of a system to handle an increased workload. For complex systems that are abruptly exposed via open interfaces and hence a greater workload, the scalability requirements may quickly increase, leading to technical debt. We term this scalability debt. This paper describes scalability triage, a light-weight, novel technique for identifying scalability threats as a form of technical debt. We illustrate this technique with an open banking case from a large software organization. Open banking is partly caused by the new European PSD2 regulative that enforce banks to open interfaces to unknown third-party actors. Banking systems are well-established, mature systems. However, with the advent of open banking and PSD2, the workload may quickly rocket. This leads to tougher scalability requirements and accumulated architectural debt, despite previously sound architectural decisions. Using scalability triage, such risks may be identified fast. It will then be possible to prevent this form of technical debt with timely reengineering.","","978-1-7281-3371-3","10.1109/TechDebt.2019.00014","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8785983","agile development, scalability requirements, scalability triage, open banking","Hafnium;Germanium","","3","","15","IEEE","5 Aug 2019","","","IEEE","IEEE Conferences"
"An Empirically Developed Method to Aid Decisions on Architectural Technical Debt Refactoring: AnaConDebt","A. Martini; J. Bosch","Software Engineering Division, Chalmers University of Technology, Gothenburg, Sweden; Software Engineering Division, Chalmers University of Technology, Gothenburg, Sweden","2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)","23 Mar 2017","2016","","","31","40","Architectural Technical Debt is regarded as sub-optimal architectural solutions that need to be refactored in order to avoid the payment of a costly interest in the future. However, decisions on if and when to refactor architecture are extremely important and difficult to take, since changing software at the architectural level is quite expensive. Therefore it is important, for software organizations, to have methods and tools that aid architects and managers to understand if Architecture Technical Debt will generate a costly and growing interest to be paid or not. Current knowledge, especially empirically developed and evaluated, is quite scarce. In this paper we developed and evaluated a method, AnaConDebt, by analyzing, together with several practitioners, 12 existing cases of Architecture Debt in 6 companies. The method has been refined several times in order to be useful and effective in practice. We also report the evaluation of the method with a final case, for which we present anonymized results and subsequent refactoring decisions. The method consists of several components that need to be analyzed, combining the theoretical Technical Debt framework and the practical experience of the practitioners, in order to identify the key factors involved in the growth of interest. The output of the method shows summarized indicators that visualizes the factors in a useful way for the stakeholders. This analysis aids the practitioners in deciding on if and when to refactor Architectural Technical Debt items. The method has been evaluated and has been proven useful to support the architects into systematically analyze and decide upon a case.","","978-1-4503-4205-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7883286","Architectural Technical Debt;refactoring;decision making;estimation;method;design research;empirical study","Computer architecture;Software;Stakeholders;Companies;Software engineering","","3","","21","","23 Mar 2017","","","IEEE","IEEE Conferences"
"Evaluating the Architectural Debt of IoT Projects","F. A. Fontana; I. Pigazzini","University of Milano - Bicocca, Milan, Italy; University of Milano - Bicocca, Milan, Italy","2021 IEEE/ACM 3rd International Workshop on Software Engineering Research and Practices for the IoT (SERP4IoT)","24 Aug 2021","2021","","","27","31","We observed a great and increasing interest in the last few years towards the evaluation of technical debt of software projects, in particular in the direction of code and architectural debt evaluation. This kind of analysis has not yet been performed for IoT projects. Hence, in this paper we start this exploration through the analysis of four Open Source IoT projects. We focus our attention on architectural debt and we exploit a tool, called Arcan, developed for architectural smell detection and for the computation of an architectural debt index. The results show that also IoT projects are subjected to architectural debt, and in particular to the presence of Cyclic Dependency and Unstable Dependency smells. However, there is evidence that the continuous refactoring of the code helps in avoiding the increase of debt, hence also developers of IoT projects should schedule periodical clean-ups of their code.","","978-1-6654-4569-6","10.1109/SERP4IoT52556.2021.00011","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9516817","IoT Projects;Architectural Debt;Architectural Smells;Architectural Debt Index","Schedules;Conferences;Tools;Software;Indexes;Software engineering","","","","15","IEEE","24 Aug 2021","","","IEEE","IEEE Conferences"
"Detecting and Quantifying Architectural Debt: Theory and Practice","Yuanfang Cai; R. Kazman","Computer Science Department, Drexel University Philadelphia, PA, USA; Shidler College of Business, University of Hawaii, Honolulu, HI, USA","2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C)","24 Aug 2017","2017","","","503","504","In this technical briefing, we will introduce the theory, practice, and tool support for detecting and quantifying architectural debt. We will introduce the concept of design rule space (DRSpace)-a new architectural model forming the foundation of architectural debt detection, hotspot patterns- recurring architectural flaws leading to architectural debt, and architectural debt quantification.","","978-1-5386-1589-8","10.1109/ICSE-C.2017.165","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7965404","software architecture;technical debt;software design","Tools;Computer architecture;Software systems;Computer bugs;Software architecture","","","","10","IEEE","24 Aug 2017","","","IEEE","IEEE Conferences"
"Mitigating Technical and Architectural Debt with Sonargraph","A. von Zitzewitz","Hello2morrow, Inc., Plymouth, MA, USA","2019 IEEE/ACM International Conference on Technical Debt (TechDebt)","5 Aug 2019","2019","","","66","67","Sonargraph is a static analyzer with a focus on software architecture and metrics. The motivation to create Sonargraph came from the assumption that architectural debt (aka structural debt) is the most toxic form of technical debt. Repairing a broken architecture requires global and high-risk changes, while fixing other forms of technical debt mostly involves low-risk local changes. Therefore, the tool enables architects and developers to formally describe their architectural blueprint using a custom DSL (domain specific language). Once defined architectural rules can be checked and enforced in an automated way in all stages of the development process. This guarantees that a software system will never end up as the notorious ""big ball of mud"". Sonargraph currently supports Java, C#, C/C++ and Python and is used by hundreds of organizations worldwide.","","978-1-7281-3371-3","10.1109/TechDebt.2019.00022","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8786002","software architecture enforcement;architectural debt;software metrics","Computer architecture;DSL;Connectors;Visualization;Software metrics;Detectors","","5","","2","IEEE","5 Aug 2019","","","IEEE","IEEE Conferences"
"The Influence of Cognitive Biases on Architectural Technical Debt","K. Borowa; A. Zalewski; S. Kijas","Warsaw University of Technology, Institute of Control and Computation Engineering, Warsaw, Poland; Warsaw University of Technology, Institute of Control and Computation Engineering, Warsaw, Poland; Warsaw University of Technology, Institute of Control and Computation Engineering, Warsaw, Poland","2021 IEEE 18th International Conference on Software Architecture (ICSA)","11 May 2021","2021","","","115","125","Cognitive biases exert a significant influence on human thinking and decision-making. In order to identify how they influence the occurrence of architectural technical debt, a series of semi-structured interviews with software architects was performed. The results show which classes of architectural technical debt originate from cognitive biases, and reveal the antecedents of technical debt items (classes) through biases. This way, we analysed how and when cognitive biases lead to the creation of technical debt. We also identified a set of debiasing techniques that can be used in order to prevent the negative influence of cognitive biases. The observations of the role of organisational culture in the avoidance of inadvertent technical debt throw a new light on that issue.","","978-1-7281-6260-7","10.1109/ICSA51549.2021.00019","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9426715","Software Architecture;Cognitive Bias;Technical Debt;Architectural Technical Debt;Architectural DecisionMaking","Software architecture;Conferences;Decision making;Software;Organizational aspects;Interviews","","5","","28","IEEE","11 May 2021","","","IEEE","IEEE Conferences"
"An Architectural Technical Debt Index Based on Machine Learning and Architectural Smells","D. Sas; P. Avgeriou","Bernoulli Institute for Mathematics, Computer Science, and Artificial Intelligence, University of Groningen, Groningen, Netherlands; Bernoulli Institute for Mathematics, Computer Science, and Artificial Intelligence, University of Groningen, Groningen, Netherlands","IEEE Transactions on Software Engineering","14 Aug 2023","2023","49","8","4169","4195","A key aspect of technical debt (TD) management is the ability to measure the amount of principal accumulated in a system. The current literature contains an array of approaches to estimate TD principal, however, only a few of them focus specifically on architectural TD, but none of them satisfies all three of the following criteria: being fully automated, freely available, and thoroughly validated. Moreover, a recent study has shown that many of the current approaches suffer from certain shortcomings, such as relying on hand-picked thresholds. In this article, we propose a novel approach to estimate architectural technical debt principal based on machine learning and architectural smells to address such shortcomings. Our approach can estimate the amount of technical debt principal generated by a single architectural smell instance. To do so, we adopt novel techniques from Information Retrieval to train a learning-to-rank machine learning model (more specifically, a gradient boosting machine) that estimates the severity of an architectural smell and ensure the transparency of the predictions. Then, for each instance, we statically analyse the source code to calculate the exact number of lines of code creating the smell. Finally, we combine these two values to calculate the technical debt principal. To validate the approach, we conducted a case study and interviewed 16 practitioners, from both open source and industry, and asked them about their opinions on the TD principal estimations for several smells detected in their projects. The results show that for 71% of instances, practitioners agreed that the estimations provided were representative of the effort necessary to refactor the smell.","1939-3520","","10.1109/TSE.2023.3286179","ITEA3 research project(grant numbers:17038 VISDOM); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10152491","Machine learning;technical debt;architectural smells;arcan;learning-to-rank;case study","Codes;Estimation;Indexes;Couplings;Standards;Source coding;Shape","","1","","88","IEEE","14 Jun 2023","","","IEEE","IEEE Journals"
"Is Self-Admitted Technical Debt a Good Indicator of Architectural Divergences?","G. Sierra; A. Tahmid; E. Shihab; N. Tsantalis","Data-driven Analysis of Software (DAS) Lab, Concordia University, Montreal, Canada; Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada; Data-driven Analysis of Software (DAS) Lab, Concordia University, Montreal, Canada; Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada","2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)","18 Mar 2019","2019","","","534","543","Large software systems tend to be highly complex and often contain unaddressed issues that evolve from bad design practices or architectural implementations that drift from definition. These design flaws can originate from quick fixes, hacks or shortcuts to a solution, hence they can be seen as Technical Debt. Recently, new work has focused on studying source code comments that indicate Technical Debt, i.e., Self-Admitted Technical Debt (SATD). However, it is not known if addressing information left by developers in the form source code comments can give insight about the design flaws in a system and have the potential to provide fixes for bad architectural implementations. This paper investigates the possibility of using SATD comments to resolve architectural divergences. We leverage a data set of previously classified SATD comments to trace them to the architectural divergences of a large open source system, namely ArgoUML. We extract its conceptual and concrete architectures based on available design documentation and source code, and contrast both to expose divergences, trace them to SATD comments, and investigate their resolution. We found 7 high-level divergences in ArgoUML and 22 others among its subsystems, observing that merely 4 out of 29 (14%) divergences can be directly traced to SATD. Although using SATD as an indicator of architectural divergences is viable, the effort of doing so is time-intensive, and in general, will not lend to a significant reduction of architectural flaws in a software system.","1534-5351","978-1-7281-0591-8","10.1109/SANER.2019.8667999","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8667999","Self-Admitted Technical Debt;Software Re-Engineering;Software Architecture;Architecture Recovery","Documentation;Software systems;Computer architecture;Tools;Task analysis;Information services;Electronic publishing","","6","","22","IEEE","18 Mar 2019","","","IEEE","IEEE Conferences"
"Towards Prioritizing Architecture Technical Debt: Information Needs of Architects and Product Owners","A. Martini; J. Bosch","Chalmers University of Technology Software Engineering Division, Göteborg, Sweden; Chalmers University of Technology Software Engineering Division, Göteborg, Sweden","2015 41st Euromicro Conference on Software Engineering and Advanced Applications","26 Oct 2015","2015","","","422","429","Architectural Technical Debt is a metaphor for representing sub-optimal architectural solutions that might cause an interest, in terms of effort or quality, to be paid by the organization in the long run. Such metaphor has been regarded as useful for communicating risks of suboptimal solutions between technical and non-technical stakeholders. However, it's fundamental to understand the information needs of the involved stakeholders in order to produce technical debt measurements that would allow proper communication and informed prioritization. We have investigated, through a combination of interviews, observations and a survey, what key information is needed by agile product owners and software architects in order to prioritize the refactoring of risky architectural technical debt items with respect to feature development.","2376-9505","978-1-4673-7585-6","10.1109/SEAA.2015.78","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7302484","Architecture Technical Debt;Prioritization Aspects;Feature Prioritization;Refactoring Prioritization;Information Need","Companies;Software;Computer architecture;Maintenance engineering;Portfolios;Conferences","","14","","18","IEEE","26 Oct 2015","","","IEEE","IEEE Conferences"
"The Hidden Cost of Backward Compatibility: When Deprecation Turns into Technical Debt - An Experience Report","A. Sundelin; J. Gonzalez-Huerta; K. Wnuk","Blekinge Institute of Technology, Karlskrona, Sweden; Blekinge Institute of Technology, Karlskrona, Sweden; Blekinge Institute of Technology, Karlskrona, Sweden","2020 IEEE/ACM International Conference on Technical Debt (TechDebt)","9 Aug 2023","2020","","","67","76","Context: The micro-services architectural pattern advocates for the partitioning of functionality into loosely coupled services, which should be backward compatible, to enable independent upgrades. Deprecation is commonly used as a tool to manage multiple versions of methods or services. However, deprecation carries a cost in that tests might be duplicated and might rely on services that have become deprecated over time.Objective: Using the terms of the Technical Debt metaphor, we explore the consequences of deprecation, and how it has affected the test base during seven years.Method: We take an exploratory approach, reporting on experiences found before and after servicing parts of the incurred Technical Debt. We mine code repositories and validate our findings with experienced developers.Results: We found that the growth of deprecation debt varied a lot. Some services experienced substantial growth, but most did not. Unit tests, where deprecation is visible in the developers’ tools, were much less affected than integration tests, which lack such visualization mechanisms. While servicing debt of 121 out of 285 deprecated services, we discovered that up to 29% of the spent effort could be attributed to accrued interest. However, this is an upper bound; there could be less impact, depending on whether scripting could be used to service the debt or not.Conclusion: This paper illustrates that integration tests can be viewed as a debt from the perspective of deprecated services. While the pattern was that deprecated services (debt principal) experienced no or little accrued interest, some, highly used, services experienced a lot, particularly during stressful times. Java-based tests, where deprecation is visible in the IDE, did not experience a similar pattern of increasing debt. We postulate that deprecation debt should be kept visible, either using developer tools or statistical reports.","","978-1-4503-7960-1","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10206868","backwards compatibility;deprecation;technical debt;automated test base","Visualization;Cloud computing;Costs;Upper bound;Codes;Agile software development;Software","","","","13","","9 Aug 2023","","","IEEE","IEEE Conferences"
"Detecting the Locations and Predicting the Maintenance Costs of Compound Architectural Debts","L. Xiao; Y. Cai; R. Kazman; R. Mo; Q. Feng","School of Systems and Enterprises, Stevens Institute of Technology, Hoboken, NJ, USA; Computer Science, Drexel University, Philadelphia, PA, USA; Department of Information Technology Management, University of Hawaii, Honolulu, HI, USA; Computer Science, Central China Normal University, Wuhan, Hubei, China; School of Computer Science and Engineering, Nanjing University of Science and Technology, Nanjing, Jiangsu, China","IEEE Transactions on Software Engineering","16 Sep 2022","2022","48","9","3686","3715","Architectural Technical Debt (ATD) refers to sub-optimal architectural design in a software system that incurs high maintenance “interest” over time. Previous research revealed that ATD has significant negative impact on daily development. This paper contributes an approach to enable an architect to precisely locate ATDs, as well as capture the trajectory of maintenance cost on each debt, based on which, predict the cost of the debt in a future release. The ATDs are expressed in four typical patterns, which entail the core of each debt. Furthermore, we aggregate compound ATDs to capture the complicated relationship among multiple ATD instances, which should be examined together for effective refactoring solutions. We evaluate our approach on 18 real-world projects. We identified ATDs that persistently incur significant (up to 95 percent of) maintenance costs in most projects. The maintenance costs on the majority of debts fit into a linear regression model—indicating stable “interest” rate. In five projects, 12.1 to 27.6 percent of debts fit into an exponential model, indicating increasing “interest” rate, which deserve higher priority from architects. The regression models can accurately predict the costs of the majority of (82 to 100 percent) debts in the next release of a system. By aggregating related ATDs, architects can focus on a small number of cost-effective compound debts, which contain a relatively small number of source files, but account for a large portion of maintenance costs in their projects. With these capabilities, our approach can help architects make informed decisions regarding whether, where, and how to refactor for eliminating ATDs in their systems.","1939-3520","","10.1109/TSE.2021.3102221","National Science Foundation(grant numbers:CNS-1823074,CNS-1823177,CNS-1823214,CCF-1817267,CCF-1816594,OAC-1835292); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9508122","Software architecture;technical debt;software maintenance;debt quantification and prioritization","Maintenance engineering;Software;Compounds;Computer architecture;History;Trajectory;Aggregates","","8","","120","IEEE","5 Aug 2021","","","IEEE","IEEE Journals"
"An Analysis of Techniques and Methods for Technical Debt Management: A Reflection from the Architecture Perspective","C. Fernández-Sánchez; J. Garbajosa; C. Vidal; A. Yagüe","ETSISI & CITSEM, Technical University of Madrid (UPM), Spain; ETSISI & CITSEM, Technical University of Madrid (UPM), Spain; ETSISI & CITSEM, Technical University of Madrid (UPM), Spain; ETSISI & CITSEM, Technical University of Madrid (UPM), Spain","2015 IEEE/ACM 2nd International Workshop on Software Architecture and Metrics","3 Aug 2015","2015","","","22","28","Technical debt is a metaphor referring to the consequences of weak software development. Managing technical debt is necessary in order to keep it under control, and several techniques have been developed with the goal of accomplishing this. However, available techniques have grown disperse and managers lack guidance. This paper covers this gap by providing a systematic mapping of available techniques and methods for technical debt management, covering architectural debt, and identifying existing gaps that prevent to manage technical debt efficiently.","","978-1-4673-7076-9","10.1109/SAM.2015.11","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7174845","Software architecture;technical debt;architectural technical debt;technical debt management;systematic mapping;tools;techniques","Estimation;Software;Measurement;Systematics;Uncertainty;Economics;Maintenance engineering","","8","","47","IEEE","3 Aug 2015","","","IEEE","IEEE Conferences"
"Assuring the Evolvability of Microservices: Insights into Industry Practices and Challenges","J. Bogner; J. Fritzsch; S. Wagner; A. Zimmermann","University of Applied Sciences Reutlingen, Germany; University of Stuttgart, Germany; University of Stuttgart, Germany; University of Applied Sciences Reutlingen, Germany","2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)","5 Dec 2019","2019","","","546","556","While Microservices promise several beneficial characteristics for sustainable long-term software evolution, little empirical research covers what concrete activities industry applies for the evolvability assurance of Microservices and how technical debt is handled in such systems. Since insights into the current state of practice are very important for researchers, we performed a qualitative interview study to explore applied evolvability assurance processes, the usage of tools, metrics, and patterns, as well as participants' reflections on the topic. In 17 semi-structured interviews, we discussed 14 different Microservice-based systems with software professionals from 10 companies and how the sustainable evolution of these systems was ensured. Interview transcripts were analyzed with a detailed coding system and the constant comparison method. We found that especially systems for external customers relied on central governance for the assurance. Participants saw guidelines like architectural principles as important to ensure a base consistency for evolvability. Interviewees also valued manual activities like code review, even though automation and tool support was described as very important. Source code quality was the primary target for the usage of tools and metrics. Despite most reported issues being related to Architectural Technical Debt (ATD), our participants did not apply any architectural or service-oriented tools and metrics. While participants generally saw their Microservices as evolvable, service cutting and finding an appropriate service granularity with low coupling and high cohesion were reported as challenging. Future Microservices research in the areas of evolution and technical debt should take these findings and industry sentiments into account.","2576-3148","978-1-7281-3094-1","10.1109/ICSME.2019.00089","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8919247","Microservices, interviews, industry, evolvability, assurance","Interviews;Software;Industries;Tools;Measurement;Companies;Guidelines","","12","","23","IEEE","5 Dec 2019","","","IEEE","IEEE Conferences"
"Technical Debt-Related Information Asymmetry between Finance and IT","T. Stablein; D. Berndt; M. Mullarkey",University of South Florida; University of South Florida; University of South Florida,"2018 IEEE/ACM International Conference on Technical Debt (TechDebt)","30 Dec 2018","2018","","","134","137","This position paper proposes a new stream of research targeted at technical debt as a source of information asymmetry between finance and IT professionals involved in information technology investment decisions. Finance teams interact with technology teams in several ways, predominantly when business cases require review and during the annual budgeting process. During these discrete interactions, finance teams are required to digest large amounts of technical strategy and architectural information chockfull of technical terminology and diagrams. Typically, the estimates for effort are soft and risk is difficult to measure. It is within this context that finance approves budgets and projects that inevitably result in the accumulation of technical debt. This paper discusses some of the dynamics at work between finance and IT teams within large complex organizations when they meet to make technology investment decisions. In addition, future research is proposed aimed at reducing information asymmetry, thereby leading to improved IT investment decisions and better management of technical debt.","","978-1-4503-5713-5","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8595114","technical debt;information asymmetry;IT investment;decision making","Finance;Investment;Organizations;Interviews;Stakeholders;Encoding","","1","","9","","30 Dec 2018","","","IEEE","IEEE Conferences"
"Towards an Architectural Debt Index","R. Roveda; F. Arcelli Fontana; I. Pigazzini; M. Zanoni","Alten Italia, Milano, Italy; Department of Informatics, Università of Milano-Bicocca; Department of Informatics, Università of Milano-Bicocca; Department of Informatics, Università of Milano-Bicocca","2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)","21 Oct 2018","2018","","","408","416","Different indexes have been proposed to evaluate software quality and technical debt. Usually these indexes take into account different code level issues and several metrics, well known software metrics or new ones defined ad hoc for a specific purpose. In this paper we propose and define a new index, more oriented to the evaluation of architectural violations. We describe in detail the index, called Architectural Debt Index, that we integrated in a tool developed for architectural smell detection. The index is based on the detection of architectural smells, their criticality and their history. Currently only dependency architectural smells have been considered, but other architectural debt indicators can be considered and integrated in the index computation.","","978-1-5386-7383-6","10.1109/SEAA.2018.00073","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8498240","architectural smells;architectural debt index;severity index;technical debt","Indexes;Tools;Measurement;History;Estimation;Computer architecture;Electronic mail","","21","","30","IEEE","21 Oct 2018","","","IEEE","IEEE Conferences"
"Software Architecture Social Debt: Managing the Incommunicability Factor","D. A. Tamburri","Jheronimus Academy of Data Science, Technische Universiteit Eindhoven, Eindhoven, The Netherlands","IEEE Transactions on Computational Social Systems","13 Feb 2019","2019","6","1","20","37","Architectural technical debt is the additional project cost connected to technical issues nested in software architectures. Similarly, many practitioners have already experienced that there exists within software architectures a form of social debt, that is, the additional project cost connected to sociotechnical and organizational issues evident in or related to software architectures. This paper illustrates four recurrent antipatterns or community smells connected to such architectural social debt and outlines a means to measure the additional project cost connected to their underlying cause: decision incommunicability. Evaluating the results in multiple focus groups, this paper concludes that studying social debt and community smells at the architecture level may prove vital to rid software development communities of critical organizational flaws incurring considerable additional cost.","2329-924X","","10.1109/TCSS.2018.2886433","European Commission(grant numbers:0421); European Commission (H2020), ANITA(grant numbers:787061); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8613009","Social debt;social debt cost estimation;social debt in software architecting;technical debt","Software architecture;Software;Computer architecture;Green products;Interviews;Europe;Documentation","","17","","61","IEEE","15 Jan 2019","","","IEEE","IEEE Journals"
"Towards the Assisted Decomposition of Large-Active Files","J. Lefever; Y. Cai; R. Kazman; H. Fang","Drexel University, Philadelphia, USA; Drexel University, Philadelphia, USA; University of Hawaii, Honolulu, USA; Drexel University, Philadelphia, USA","2023 IEEE 20th International Conference on Software Architecture Companion (ICSA-C)","24 Apr 2023","2023","","","126","130","Tightly coupled and interdependent systems inhibit productivity by requiring developers to carefully coordinate their changes, even when modifying subsystems that should be independent of one another. Poor architectural decisions frequently lead to the presence of large, change-prone source files that are at the center of complexes of technical debt [11], [6]. This kind of technical debt quickly incurs interest both through coordination costs and error-proneness. In this paper, we present a new approach for decomposing these ""large-active"" files to pay down critical technical debt. We package our approach as a refactoring recommendation system. Each recommendation is determined by analyzing patterns of co-change and mutual dependency among files. Each recommendation corresponds to a responsibility the large-active file has in relation to the rest of the system. By moving recommended functionality from the large-active file into smaller files, developers can reduce the impact of a debt-laden file and clarify its essential responsibilities. A key advantage of this approach over prior work is that we better focus effort; we avoid spending developer effort refactoring code that is only superficially problematic. We achieve this by incorporating revision history into both determining and ranking recommendations. Each recommendation corresponds to some change-prone responsibility. We present some examples of this approach in action and outline our future plans.","2768-4288","978-1-6654-6459-8","10.1109/ICSA-C57050.2023.00037","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10092677","refactoring;design improvement;software architecture","Couplings;Productivity;Codes;Costs;Software architecture;Computer bugs;Computer architecture","","","","18","IEEE","24 Apr 2023","","","IEEE","IEEE Conferences"
"Exploiting dynamic analysis for architectural smell detection: a preliminary study","I. Pigazzini; D. Di Nucci; F. A. Fontana; M. Belotti","University of Milano-Bicocca, Milan, Italy; University of Salerno, Fisciano, Italy; University of Milano-Bicocca, Milan, Italy; University of Milano-Bicocca, Milan, Italy","2022 48th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)","16 Jan 2023","2022","","","282","289","Architectural anomalies, also known as architectural smells, represent the violation of design principles or decisions that impact internal software qualities with significant negative effects on maintenance, evolution costs and technical debt. Architectural smells, if early removed, have an overall impact on reducing a possible progressive architectural erosion and architectural debt. Some tools have been proposed for their detection, exploiting different methods, usually based only on static analysis. This work analyzes how dynamic analysis can be exploited to detect architectural smells. We focus on two smells, Hub-Like Dependency and Cyclic Dependency, and we extend an existing tool integrating dynamic analysis. We conduct an empirical study on ten projects. We compare the results obtained comparing a method featuring dynamic analysis and the original version of Arcan based only on static analysis to understand if dynamic analysis can be successfully used. The results show that dynamic analysis helps identify missing architectural smells instances, although its usage is hindered by the lack of test suites suitable for this scope.","","978-1-6654-6152-8","10.1109/SEAA56994.2022.00051","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10011491","architectural smell detection;dynamic analysis;architectural debt","Costs;Static analysis;Software quality;Maintenance engineering;Software engineering","","","","43","IEEE","16 Jan 2023","","","IEEE","IEEE Conferences"
"Identifying Architectural Technical Debt in Android Applications through Automated Compliance Checking","R. Verdecchia","Vrije Universiteit, Amsterdam, The Netherlands","2018 IEEE/ACM 5th International Conference on Mobile Software Engineering and Systems (MOBILESoft)","22 Nov 2018","2018","","","35","36","By considering the fast pace at which mobile applications need to evolve, Architectural Technical Debt results to be a crucial yet implicit factor of success. In this research we present an approach to automatically identify Architectural Technical Debt in Android applications. The approach takes advantage of architectural guidelines extraction and modeling, architecture reverse engineering, and compliance checking. As future work, we plan to fully automate the process and empirically evaluate it via large-scale experiments.","","978-1-4503-5712-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8543428","Software Architecture;Technical Debt;Android;Compliance Checking","Computer architecture;Guidelines;Software;Architecture;Reverse engineering;Complexity theory;Tools","","","1","5","","22 Nov 2018","","","IEEE","IEEE Conferences"
"Determining Enterprise Architecture Smells from Software Architecture Smells","B. Tieu; S. Hacks","School of Electrical Engineering and Computer Science, KTH Royal Institute of Technology, Stockholm, Sweden; The Maersk Mc-Kinney Moller Institute University of Southern Denmark, Odense, Denmark","2021 IEEE 23rd Conference on Business Informatics (CBI)","19 Nov 2021","2021","02","","134","142","Software Architectural Smells (SA smells) are design problems in the internal structure and behavior of an SA. These can be seen as a specific category under the umbrella concept of Technical Debt (TD). TD is a central concept in software development projects and having the means to detect and measure the smells is important to understand impairments they may cause. However, TD is only limited to the technical aspects and does not describe smells found on an enterprise level. Enterprise Architecture Debt (EAD) expands the concepts of TD beyond the technical aspects such that it covers the debts that can be found in all layers of an Enterprise Architecture (EA). EA smells give a measurement for EAD, by providing means for detecting the smell, hence enabling a method to quantify the level of debt. The goal of this paper is to find EA smells derived from existing SA smells. This has resulted in three new EA smells that could be used as measurements for the quality of an EA. They can also be used in the future as a basis for automatic EA smell detection.","2378-1971","978-1-6654-2069-3","10.1109/CBI52690.2021.10064","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9610644","","Software architecture;Conferences;Computer architecture;Organizations;Software;Cognition;Software measurement","","2","","34","IEEE","19 Nov 2021","","","IEEE","IEEE Conferences"
"Technical Debt Indexes Provided by Tools: A Preliminary Discussion","F. A. Fontana; R. Roveda; M. Zanoni","Università degli Studi di Milano - Bicocca, Milan, Italy; Università degli Studi di Milano - Bicocca, Milan, Italy; Università degli Studi di Milano - Bicocca, Milan, Italy","2016 IEEE 8th International Workshop on Managing Technical Debt (MTD)","8 Dec 2016","2016","","","28","31","In software maintenance and evolution, it is important to assess both code and architecture in order to identify issues to be solved to improve software quality. Different tools provide some kind of index giving us an overall evaluation of a project to be used when managing its technical debt. In this paper, we outline how the indexes, that we call in general Technical Debt Indexes, provided by five different tools are computed. We describe their principal features and differences, what aspects they are missing, and we outline if (and how) the indexes take into account architectural problems that could have a major impact on the architectural debt. We show that the indexes rely on different information sources and measure different quantities.","","978-1-5090-3854-1","10.1109/MTD.2016.11","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7776450","Technical Debt Indexes;Architectural Debt;Software Quality Analysis Tools","Indexes;Computer architecture;Estimation;Complexity theory;Time measurement;Encoding","","25","","16","IEEE","8 Dec 2016","","","IEEE","IEEE Conferences"
"Estimating the size, cost, and types of Technical Debt","B. Curtis; J. Sappidi; A. Szynkarski","CAST, Fort Worth, TX, USA; CAST, Fort Worth, TX, USA; CAST, Paris, France","2012 Third International Workshop on Managing Technical Debt (MTD)","28 Jun 2012","2012","","","49","53","This study summarizes results of a study of Technical Debt across 745 business applications comprising 365 million lines of code collected from 160 companies in 10 industry segments. These applications were submitted to a static analysis that evaluates quality within and across application layers that may be coded in different languages. The analysis consists of evaluating the application against a repository of over 1200 rules of good architectural and coding practice. A formula for estimating Technical Debt with adjustable parameters is presented. Results are presented for Technical Debt across the entire sample as well as for different programming languages and quality factors.","","978-1-4673-1749-8","10.1109/MTD.2012.6226000","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6226000","software metrics;software structural quality;technical debt;static analysis;benchmarking","Organizations;Software;Production;Encoding;ISO standards;Industries","","58","","10","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"Exploring the Relationship between Software Modularity and Technical Debt","P. Skiada; A. Ampatzoglou; E. -M. Arvanitou; A. Chatzigeorgiou; I. Stamelos","Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece","2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)","21 Oct 2018","2018","","","404","407","Modularity is one of the key principles of software design. In order for a software system to be modular, it should be organized into modules that are highly coherent internally, whereas at the same time as independent from other modules as possible. In this paper we explore coupling and cohesion metrics at the software package level-i.e., one of most basic levels of software functional decomposition in object-oriented (OO) systems, with the aim of investigating their relation to the technical debt of each package. Current state-of-the-art tools in TD measurement are working on the source code level, and the extent to which they can unveil limitations at the architecture level (e.g., violations of the modularity principle), has not been explored so far. To achieve this goal, we conducted a case study on 1,200 packages retrieved from 20 well-known open source software projects. The results of the study suggested that current measures of technical debt are able to identify / predict modules that lack modularity, and therefore suffer from Architectural Technical Debt (ATD). The results of the study are discussed both from the practitioners' and re-searchers' point of view.","","978-1-5386-7383-6","10.1109/SEAA.2018.00072","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8498239","coupling;cohesion;modularity;technical debt","Measurement;Software;Couplings;Computer architecture;Correlation;Tools;Java","","3","","19","IEEE","21 Oct 2018","","","IEEE","IEEE Conferences"
"Accumulation and Prioritization of Architectural Debt in Three Companies Migrating to Microservices","S. S. De Toledo; A. Martini; P. H. Nguyen; D. I. K. Sjøberg","Department for Informatics, University of Oslo, Oslo, Norway; Department for Informatics, University of Oslo, Oslo, Norway; SINTEF, Oslo, Norway; Department for Informatics, University of Oslo, Oslo, Norway","IEEE Access","12 Apr 2022","2022","10","","37422","37445","Many companies migrate to microservices because they help deliver value to customers quickly and continuously. However, like any architectural style, microservices are prone to architectural technical debt (ATD), which can be costly if the debts are not timely identified, avoided, or removed. During the early stages of migration, microservice-specific ATDs (MS-ATDs) may accumulate. For example, practitioners may decide to continue using poorly defined APIs in microservices while attempting to maintain compatibility with old functionalities. The riskiest MS-ATDs must be prioritized. Nevertheless, there is limited research regarding the prioritization of MS-ATDs in companies migrating to microservices. This study aims to identify, during migration, which MS-ATDs occur, are the most severe, and are the most challenging to solve. In addition, we propose a way to prioritize these debts. We conducted a multiple exploratory case study of three large companies that were early in the migration process to microservices. We interviewed 47 practitioners with several roles to identify the debts in their contexts. We report the MS-ATDs detected during migration, the MS-ATDs that practitioners estimate to occur in the future, and the MS-ATDs that practitioners report as difficult to solve. We discuss the results in the context of the companies involved in this study. In addition, we used a risk assessment approach to propose a way for prioritizing MS-ATDs. Practitioners from other organizations and researchers may use this approach to provide rankings to help identify and prioritize which MS-ATDs should be avoided or solved in their contexts.","2169-3536","","10.1109/ACCESS.2022.3158648","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9732968","Architectural technical debt;microservices;software maintainability;cross-company study;qualitative analysis","Microservice architectures;Computer architecture;Costs;Scalability;Software maintenance","","5","","33","CCBY","10 Mar 2022","","","IEEE","IEEE Journals"
"An Architectural Smells Detection Tool for C and C++ Projects","A. Biaggi; F. Arcelli Fontana; R. Roveda","Università degli Studi di Milano-Bicocca, Milan, Italy; Università degli Studi di Milano-Bicocca, Milan, Italy; Università degli Studi di Milano-Bicocca, Milan, Italy","2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)","21 Oct 2018","2018","","","417","420","Architectural smells gained great attention in the past few years since they directly affect software quality and increase architectural technical debt. However, while it is straightforward to understand why they are important, it is more difficult to find techniques and tools to detect and remove architectural smells. The purpose of this paper is to introduce an open-source tool for automatic architectural smells detection for C/C++ projects, by creating an abstraction of the project and defining the concept of dependency between elements belonging to the project in order to identify architectural smells. The tool has been validated on some open-source projects with promising results.","","978-1-5386-7383-6","10.1109/SEAA.2018.00074","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8498241","Architectural Smells, Architectural Technical Debt, Software Architecture Evaluation, Standard C, C++","Tools;Computer architecture;Measurement;C++ languages;Image edge detection;Engines;Java","","12","","10","IEEE","21 Oct 2018","","","IEEE","IEEE Conferences"
"Revealing Social Debt with the CAFFEA Framework: An Antidote to Architectural Debt","A. Martini; J. Bosch","Computer Science and Engineering, Chalmers University of Technology, Göteborg, Sweden; Computer Science and Engineering, Chalmers University of Technology, Göteborg, Sweden","2017 IEEE International Conference on Software Architecture Workshops (ICSAW)","26 Jun 2017","2017","","","179","181","Large software companies need a well-managed Software Architecture to support continuous and fast delivery of customer value both in the short and long term. However, this can be hindered if both evolution and maintenance of existing systems are hampered by Architectural Technical Debt. To avoid the accumulation and the costly consequences of ATD, it is critical that the responsibilities to minimize it are well understood and shared in a large software organization. In this paper, we argue that an organizational model, based on a well validated framework such as CAFFEA, can be used to reveal sub-optimalities in the social structure of the organization: in other words, it can reveal Social Debt. Such sub-optimality, according to previous work, leads to the accumulation of ATD. In conclusion, using the CAFFEA framework as an organizational analysis tool, can reveal weak spots (Social Debt) in the organization and can help preventing costly ATD and its consequences.","","978-1-5090-4793-2","10.1109/ICSAW.2017.42","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7958479","Architectural Technical Debt;Social Debt","Software architecture;Software;Computer architecture;Companies;Conferences","","5","","8","IEEE","26 Jun 2017","","","IEEE","IEEE Conferences"
"Architecture Technical Debt: Understanding Causes and a Qualitative Model","A. Martini; J. Bosch; M. Chaudron","Computer Science and Engineering, I Gothenburg University, Göteborg, Sweden; Computer Science and Engineering, I Gothenburg University, Göteborg, Sweden; Computer Science and Engineering, I Gothenburg University, Göteborg, Sweden","2014 40th EUROMICRO Conference on Software Engineering and Advanced Applications","20 Nov 2014","2014","","","85","92","A known problem in large software companies is to balance the prioritization of short-term with long-term responsiveness. Specifically, architecture violations (Architecture Technical Debt) taken to deliver fast might hinder future feature development, which would hinder agility. We conducted a multiple-case embedded case study in 7 sites at 5 large companies in order to shed light on the current causes for the accumulation of Architectural Technical Debt that causes effort. We provide a taxonomy of the factors and their influence in the accumulation of debt, and we provide a qualitative model of how the debt is accumulated and recovered over time.","2376-9505","978-1-4799-5795-8","10.1109/SEAA.2014.65","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6928795","architectural technical debt;agile software development;development speed;software life-cycle;influencing factors;qualitative model;Grounded Theory","Companies;Software;Computer architecture;Conferences;Market research;Uncertainty;Variable speed drives","","52","","14","IEEE","20 Nov 2014","","","IEEE","IEEE Conferences"
"The Perception of Technical Debt in the Embedded Systems Domain: An Industrial Case Study","A. Ampatzoglou; A. Ampatzoglou; A. Chatzigeorgiou; P. Avgeriou; P. Abrahamsson; A. Martini; U. Zdun; K. Systa","Department of Computer Science, University of Groninzen, Groninzen, Netherlands; Department of Computer Science, University of Groninzen, Groninzen, Netherlands; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Computer Science, University of Groninzen, Groninzen, Netherlands; Department of Computer and Information Science, National Technical University of Norway, Trondheim, Norway; Department of Computer Science and Engineering, Chalmers University of Technology, Gothenburg, Sweden; Faculty of Computer Science, University of Vienna, Vienna, Austria; Department of Software Systems, Technical University of Tampere, Tampere, Finland","2016 IEEE 8th International Workshop on Managing Technical Debt (MTD)","8 Dec 2016","2016","","","9","16","Technical Debt Management (TDM) has drawn the attention of software industries during the last years, including embedded systems. However, we currently lack an overview of how practitioners from this application domain perceive technical debt. To this end, we conducted a multiple case study in the embedded systems industry, to investigate: (a) the expected life-time of components that have TD, (b) the most frequently occurring types of TD in them, and (c) the significance of TD against run-time quality attributes. The case study was performed on seven embedded systems industries (telecommunications, printing, smart manufacturing, sensors, etc.) from five countries (Greece, Netherlands, Sweden, Austria, and Finland). The results of the case study suggest that: (a) maintainability is more seriously considered when the expected lifetime of components is larger than ten years, (b) the most frequent types of debt are test, architectural, and code debt, and (c) in embedded systems the run-time qualities are prioritized compared to design-time qualities that are usually associated with TD. The obtained results can be useful for both researchers and practitioners: the former can focus their research on the most industrially-relevant aspects of TD, whereas the latter can be informed about the most common types of TD and how to focus their TDM processes.","","978-1-5090-3854-1","10.1109/MTD.2016.8","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7776447","technical debt;embedded systems;industry;case study","Embedded systems;Industries;Companies;Embedded software;Time division multiplexing;Context","","25","","24","IEEE","8 Dec 2016","","","IEEE","IEEE Conferences"
"Preemptive management of model driven technical debt for improving software quality","C. Izurieta; G. Rojas; I. Griffith","Department of Computer Science, Montana State University, USA; Universidad de Concepcion, Concepcion, CL; Department of Computer Science, Montana State University, USA","2015 11th International ACM SIGSOFT Conference on Quality of Software Architectures (QoSA)","14 Apr 2016","2015","","","31","36","Technical debt has been the subject of numerous studies over the last few years. To date, most of the research has concentrated on management (detection, quantification, and decision making) approaches-most performed at code and implementation levels through various static analysis tools. However, if practitioners are to adopt model driven techniques, then the management of technical debt also requires that we address this problem during the specification and architectural phases. This position paper discusses several questions that need to be addressed in order to improve the quality of software architecture by exploring the management of technical debt during modeling, and suggests various lines of research that are worthwhile subjects for further investigation.","","978-1-4503-3470-9","10.1145/2737182.2737193","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7450799","Technical debt;model driven development;software quality;software maintenance;model and architectural quality","Object oriented modeling;Taxonomy;Software quality;Software engineering;Computer science;Decision making","","6","","33","","14 Apr 2016","","","IEEE","IEEE Conferences"
"Towards a comprehensive self-admitted technical debt extraction technique from source code comments","Y. S. Al-Slais","College of Information Technology, University of Bahrain, Kingdom of Bahrain","3rd Smart Cities Symposium (SCS 2020)","22 Sep 2021","2020","2020","","109","114","Identifying Technical Debt (TD) within Software Development Projects (SDP) is a growing research interest as it has the potential to save software developers’ effort in maintenance tasks. Although there are ten types of TD, there is a lack of automatic techniques to extract them through static nor dynamic analysis. This paper proposes a self-admitted TD extraction framework to extract TD from software’s comments and classify them comprehensively through a Parts-of-Speech technique. A public TD dataset is used to evaluate the proposed framework. Results show that the proposed technique was able to increase the classification of build, architectural, versioning, and infrastructure TD by 16%.","","","10.1049/icp.2021.0881","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9545671","","","","","","","","22 Sep 2021","","","IET","IET Conferences"
"Toward Predicting Architectural Significance of Implementation Issues","A. Shahbazian; D. Nam; N. Medvidovic","University of Southern California, Los Angeles, CA, USA; University of Southern California, Los Angeles, CA, USA; University of Southern California, Los Angeles, CA, USA","2018 IEEE/ACM 15th International Conference on Mining Software Repositories (MSR)","30 Dec 2018","2018","","","215","219","In a software system's development lifecycle, engineers make numerous design decisions that subsequently cause architectural change in the system. Previous studies have shown that, more often than not, these architectural changes are unintentional by-products of continual software maintenance tasks. The result of inadvertent architectural changes is accumulation of technical debt and deterioration of software quality. Despite their important implications, there is a relative shortage of techniques, tools, and empirical studies pertaining to architectural design decisions. In this paper, we take a step toward addressing that scarcity by using the information in the issue and code repositories of open-source software systems to investigate the cause and frequency of such architectural design decisions. Furthermore, building on these results, we develop a predictive model that is able to identify the architectural significance of newly submitted issues, thereby helping engineers to prevent the adverse effects of architectural decay. The results of this study are based on the analysis of 21,062 issues affecting 301 versions of 5 large open-source systems for which the code changes and issues were publicly accessible.","2574-3864","978-1-4503-5716-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8595204","Architectural Design Decisions;Implementation Issues;Architectural Change Prediction","Computer architecture;Software systems;Data mining;Open source software;Manganese;Task analysis","","","","42","","30 Dec 2018","","","IEEE","IEEE Conferences"
"Detecting Architecture Debt in Micro-Service Open-Source Projects","R. Capilla; F. A. Fontana; T. Mikkonen; P. Bacchiega; V. Salamanca","Rey Juan Carlos University of Madrid, Madrid, Spain; University of Milano-Bicocca, Milan, Italy; University of Jyväskylä, Jyväskylä, Finland; University of Milano-Bicocca, Milan, Italy; Rey Juan Carlos University, Madrid, Spain","2023 49th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)","1 Jan 2024","2023","","","394","401","A micro-service architecture emphasizes the use of subsystems that are small enough for changing them on the fly. Such architecture supports the continuous evolution of the system because individual services can be updated at different times, making system maintenance flexible. Consequently, the architecturally important properties of micro-services are constituted by service APIs that must be well maintained, with experimental, static, and deprecated versions clearly indicated. Like any software, micro-services can induce technical debt (TD) problems in service API, architecture and source code, if their quality and maintainability have not been asserted beforehand. This paper explores the relationship between TD and micro-services. Specifically, we investigate the role of architectural smells (AS) in open-source micro-service projects, where the architectural debt is principally recognized through the detection of architectural smells in the projects. As tools for this investigation, we used Arcan and Designite. The empirical data for the work is constituted by 20 open-source projects where we analyze the relationship between architecture smells and micro-services.","2376-9521","979-8-3503-4235-2","10.1109/SEAA60479.2023.00066","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10371493","Software architecture;architectural debt;micro-service;architecture smells;technical debt;open source repositories","Java;Computer languages;Source coding;Computer architecture;Maintenance engineering;Software;Software engineering","","","","49","IEEE","1 Jan 2024","","","IEEE","IEEE Conferences"
"Identification of architectural technical debt: An analysis based on naming patterns","P. M. del Carpio","Universidad La Salle, Arequipa, Perú","2016 8th Euro American Conference on Telematics and Information Systems (EATIS)","25 Jul 2016","2016","","","1","8","Hasty software development can produce immediate implementations with source code unnecessarily complex and hardly readable. These small kinds of software decay generate a technical debt that could be big enough to seriously affect future maintenance activities. This work presents an analysis technique for identifying architectural technical debt related to non-uniformity of naming patterns; the technique is based on term frequency over package hierarchies. The proposal has been evaluated on projects of two popular organizations, Apache and Eclipse. The results have shown that most of the projects have frequent occurrences of the proposed naming patterns, and using a graph model and aggregated data could enable the elaboration of simple queries for debt identification. The technique has features that favor its applicability on emergent architectures and agile software development.","","978-1-5090-2436-0","10.1109/EATIS.2016.7520104","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7520104","Architectural technical debt;naming pattern;static analysis","Software;Unified modeling language;Data models;Containers;Maintenance engineering;Proposals;Organizations","","","","","IEEE","25 Jul 2016","","","IEEE","IEEE Conferences"
"Estimating the Principal of an Application's Technical Debt","B. Curtis; J. Sappidi; A. Szynkarski","CAST Software, India; CAST Software, India; CAST Software, India","IEEE Software","22 Oct 2012","2012","29","6","34","42","This article characterizes technical debt across 700 business applications, comprising 357 MLOC. These applications were analyzed against more than 1,200 rules of good architectural and coding practice. The authors present a formula with adjustable parameters for estimating the principal of technical debt from structural quality data.","1937-4194","","10.1109/MS.2012.156","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6336724","technical debt;software structural quality;software metrics;static analysis","Investments;Software measurements;Software quality;Risk management","","80","","11","IEEE","22 Oct 2012","","","IEEE","IEEE Magazines"
"A Proposed Model-Driven Approach to Manage Architectural Technical Debt Life Cycle","B. Perez; D. Correal; H. Astudillo","Systems Engineering Department, Universidad de los Andes, Bogotá, Colombia; Systems Engineering Department, Universidad de los Andes, Bogotá, Colombia; Informatics Department, Univ. Técnica Federico Santa María, Valparaíso, Chile","2019 IEEE/ACM International Conference on Technical Debt (TechDebt)","5 Aug 2019","2019","","","73","77","Architectural Technical Debt (ATD) is a metaphor used to describe consciously decisions taken by software architects to accomplish short-term goals but possibly negatively affecting the long-term health of the system. However, difficulties arise when repayment strategies are defined because software architects need to be aware of the consequences of these strategies over others decisions in the software architecture. This article proposes REBEL, a semi-automated model-driven approach that exploits natural language processing, machine learning and model checking techniques on heterogeneous project artifacts to build a model that allows to locate and visualize the impact produced by the consciously injected ATD and its repayment strategy on the other architectural decisions. The technique is illustrated with a data analytics project in Colombia where software architects are unaware of the consequences of the repayment strategies. This proposal seeks to support teams of architects to make explicit the current and future impact of the ATD injected as a result of decisions taken, focusing on the architectural level rather than code level.","","978-1-7281-3371-3","10.1109/TechDebt.2019.00025","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8786037","Architectural technical debt;Software architecture;Architectural technical debt management;Model-driven architecture","Software;Computer architecture;Proposals;Unified modeling language;Data mining;Software architecture;Modeling","","5","","19","IEEE","5 Aug 2019","","","IEEE","IEEE Conferences"
"Managing Technical Debt Using Intelligent Techniques - A Systematic Mapping Study","D. Albuquerque; E. Guimarães; G. Tonin; P. Rodríguezs; M. Perkusich; H. Almeida; A. Perkusich; F. Chagas","Intelligent Software Engineering Group (ISE/VIRTUS), Federal University of Campina Grande, Campina Grande, PB, Brazil; Pennsylvania State University, Malvern, PA, USA; Federal University of Fronteira Sul, Chapecó, SC, Brazil; Polytechnic University of Madrid, Madrid, Spain; Intelligent Software Engineering Group (ISE/VIRTUS), Federal University of Campina Grande, Campina Grande, PB, Brazil; Intelligent Software Engineering Group (ISE/VIRTUS), Federal University of Campina Grande, Campina Grande, PB, Brazil; Intelligent Software Engineering Group (ISE/VIRTUS), Federal University of Campina Grande, Campina Grande, PB, Brazil; Intelligent Software Engineering Group (ISE/VIRTUS), Federal University of Campina Grande, Campina Grande, PB, Brazil","IEEE Transactions on Software Engineering","18 Apr 2023","2023","49","4","2202","2220","Technical Debt (TD) is a metaphor reflecting technical compromises that can yield short-term benefits but might hurt the long-term health of a software system. With the increasing amount of data generated when performing software development activities, an emergent research field has gained attention: applying Intelligent Techniques to solve Software Engineering problems. Intelligent Techniques were used to explore data for knowledge discovery, reasoning, learning, planning, perception, or supporting decision-making. Although these techniques can be promising, there is no structured understanding related to their application to support Technical Debt Management (TDM) activities. Within this context, this study aims to investigate to what extent the literature has proposed and evaluated solutions based on Intelligent Techniques to support TDM activities. To this end, we performed a Systematic Mapping Study (SMS) to investigate to what extent the literature has proposed and evaluated solutions based on Intelligent Techniques to support TDM activities. In total, 150 primary studies were identified and analyzed, dated from 2012 to 2021. The results indicated a growing interest in applying Intelligent Techniques to support TDM activities, the most used: Machine Learning and Reasoning under uncertainty. Intelligent Techniques aimed to assist mainly TDM activities related to identification, measurement, and monitoring. Design TD, Code TD, and Architectural TD are the TD types in the spotlight. Most studies were categorized at automation levels 1 and 2, meaning that existing approaches still require substantial human intervention. Symbolists and Analogizers are levels of explanation presented by most Intelligent Techniques, implying that these solutions conclude a general truth after considering a sufficient number of particular cases. Moreover, we also cataloged the empirical research types, contributions, and validation strategies described in primary studies. Based on our findings, we argue that there is still room to improve the use of Intelligent Techniques to support TDM activities. The open issues that emerged from this study can represent future opportunities for practitioners and researchers.","1939-3520","","10.1109/TSE.2022.3214764","IFPB employee qualification incentive program(grant numbers:21/2021/PRPIPG); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9919389","Technical debt;intelligent techniques;technical debt management activities;systematic mapping study","Time division multiplexing;Cognition;Codes;Costs;Systematics;Software systems;Knowledge discovery","","2","","58","IEEE","14 Oct 2022","","","IEEE","IEEE Journals"
"Evolution of the Unix System Architecture: An Exploratory Case Study","D. Spinellis; P. Avgeriou","Athens University of Economics and Business, Athina, Greece; University of Groningen, Groningen, Netherlands","IEEE Transactions on Software Engineering","11 Jun 2021","2021","47","6","1134","1163","Unix has evolved for almost five decades, shaping modern operating systems, key software technologies, and development practices. Studying the evolution of this remarkable system from an architectural perspective can provide insights on how to manage the growth of large, complex, and long-lived software systems. Along main Unix releases leading to the FreeBSD lineage we examine core architectural design decisions, the number of features, and code complexity, based on the analysis of source code, reference documentation, and related publications. We report that the growth in size has been uniform, with some notable outliers, while cyclomatic complexity has been religiously safeguarded. A large number of Unix-defining design decisions were implemented right from the very early beginning, with most of them still playing a major role. Unix continues to evolve from an architectural perspective, but the rate of architectural innovation has slowed down over the system's lifetime. Architectural technical debt has accrued in the forms of functionality duplication and unused facilities, but in terms of cyclomatic complexity it is systematically being paid back through what appears to be a self-correcting process. Some unsung architectural forces that shaped Unix are the emphasis on conventions over rigid enforcement, the drive for portability, a sophisticated ecosystem of other operating systems and development organizations, and the emergence of a federated architecture, often through the adoption of third-party subsystems. These findings have led us to form an initial theory on the architecture evolution of large, complex operating system software.","1939-3520","","10.1109/TSE.2019.2892149","European Union's Horizon 2020 Research and Innovation Programme(grant numbers:732223); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8704965","Unix;software architecture;software evolution;architecture design decisions;operating systems","Computer architecture;Complexity theory;Evolution (biology);Linux;Kernel","","6","","142","CCBY","2 May 2019","","","IEEE","IEEE Journals"
"Sustainability Debt: A Portfolio-Based Approach for Evaluating Sustainability Requirements in Architectures","B. Ojameruaye; R. Bahsoon; L. Duboc","University of Birmingham, Birmingham, United Kingdom; Computer Science, State University of Rio de, Janeiro, Brazil; University of Birmingham, Birmingham, United Kingdom","2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)","23 Mar 2017","2016","","","543","552","Architectural Sustainability refers to the ability of an architecture to achieve its goals while sustaining its value on dimensions related to environmental, social, economic, individual and/or technical during its operation and evolution. While the process of architectural design implies a fit between the requirements, system conditions and constraints; incomplete information and uncertainty may increase the cost of the architecture, introduce risks, alter its value and influence the extent to which it can evolve and sustain. We propose an economics-driven architectural evaluation method which extends the Cost Benefits Analysis Method (CBAM) and integrates principles of modern portfolio theory to control the risks when linking sustainability concern to architectural design decisions. The method aims at identifying portfolio(s) of architecture design decisions which are more promising for adding/delivering value while reducing risk on the sustainability dimensions. The method quantifies the sustainability debt of these decisions. The ultimate goal is to develop an objective decision-support framework for reasoning about sustainability requirements in relation architecture decisions in the presence of uncertainty. We evaluate the approach with an Emergency Deployment System (EDS). The results show that the method can make the value, cost and risks of architectural design decisions and sustainability requirements explicit.","","978-1-4503-4205-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7883342","Sustainability;Architecture;Debt;Technical Debt;Requirements","Computer architecture;Portfolios;Uncertainty;Software systems;Economics;Cognition","","","","23","","23 Mar 2017","","","IEEE","IEEE Conferences"
"DV8: Automated Architecture Analysis Tool Suites","Y. Cai; R. Kazman","Department of Computer Science, Drexel University, Philadelphia, USA; Dept. of Information Technology Management, University of Hawaii, Honolulu, USA","2019 IEEE/ACM International Conference on Technical Debt (TechDebt)","5 Aug 2019","2019","","","53","54","This paper present our tool suite called DV8. The objective of DV8 is to measure software modularity, detect architecture anti-patterns as technical debts, quantify the maintenance cost of each instance of an anti-pattern, and enable return on investment analyses of architectural debts. Different from other tools, DV8 integrates data from both source code and revision history. We now elaborate on each of DV8's capabilities.","","978-1-7281-3371-3","10.1109/TechDebt.2019.00015","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8786011","Software Architecture, Software Quality, Software Maintenance","Computer architecture;Maintenance engineering;Software engineering;Tools;Software;History;Software measurement","","10","","15","IEEE","5 Aug 2019","","","IEEE","IEEE Conferences"
"A Systematic Literature Review and a Unified Model of ATD","T. Besker; A. Martini; J. Bosch","Computer Science and Engineering, Chalmers University of Technology, Göteborg, Sweden; Computer Science and Engineering, Chalmers University of Technology, Göteborg, Sweden; Computer Science and Engineering, Chalmers University of Technology, Göteborg, Sweden","2016 42th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)","18 Oct 2016","2016","","","189","197","Fast software deliveries are hindered by high maintenance efforts due to internal quality issues and Technical Debt (TD) and specifically, Architectural Technical Debt (ATD) has received increased attention in the last few years. ATD has a significant influence and impact on system success and, left unchecked, it can cause expensive repercussions, it is, therefore, of maintenance and evolutionary importance to understand the basic underlying factors of ATD. Thus, with this as background, there is a need for a descriptive model to illustrate and explain the different ATD issues. The aim of this study is to synthesize and compile research efforts with the goal of creating new knowledge with a specific interest in the ATD field. The contribution of this paper is the presentation of a novel descriptive model, providing a comprehensive interpretation of the ATD phenomenon. This model categorizes the main characteristics of ATD and reveals their corresponding relations. The model is based on a systematic literature review (SLR) of currently recognized knowledge concerning ATD.","2376-9505","978-1-5090-2820-7","10.1109/SEAA.2016.42","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7592796","Systematic literature review;Architectural Technical Debt;Software Maintenance;Software Architecture","Software engineering","","36","","41","IEEE","18 Oct 2016","","","IEEE","IEEE Conferences"
"Toward a Technical Debt Conceptualization for Serverless Computing","V. Lenarduzzi; J. Daly; A. Martini; S. Panichella; D. A. Tamburri","LUT University; Consultant; University of Oslo; Zurich University of Applied Science; Jheronimus Academy of Data Science, Eindhoven University of Technology","IEEE Software","23 Dec 2020","2021","38","1","40","47","Serverless computing aims at reducing processing and operational units to single event-driven functions. It is bound to face considerable architectural issues and challenges. Are these bound to become technical debt? What does technical debt mean and how is it expressed in serverless computing models?","1937-4194","","10.1109/MS.2020.3030786","European Commission(grant numbers:Grant 0421 (Interreg ICT),Werkinzicht; Grant 787061 (H2020); Grant 825040 (H2020); Grant 825480 (H2020)); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9222009","","Cloud computing;Software testing;Servers;FAA;Computational modeling","","12","","15","IEEE","13 Oct 2020","","","IEEE","IEEE Magazines"
"Exploring the Presence of Technical Debt in Industrial GUI-Based Testware: A Case Study","E. Alégroth; M. Steiner; A. Martini","Department of Computer Science and Engineering, Chalmers University of Technology, Göteborg, Sweden; Department of Computer Science and Engineering, Chalmers University of Technology, Göteborg, Sweden; Department of Computer Science and Engineering, Chalmers University of Technology, Göteborg, Sweden","2016 IEEE Ninth International Conference on Software Testing, Verification and Validation Workshops (ICSTW)","4 Aug 2016","2016","","","257","262","Technical debt (TD) is a concept used to describe a sub-optimal solution of a software artifact that negatively affects its comprehensibility, extendability and maintainability. As such, TD adversely affects the costs or quality associated with the artifact, which is also called interest. TD has through research been identified in all types of software artifacts, from architectural design to automated tests (Testware). However, research into testware technical debt (TTD) is limited and primarily focused on testing on lower level of system abstraction, i.e. unit-and integration tests, leaving a need for more TTD research on GUI-based testing. In this study we explore this gap in knowledge through an industrial case study at a Swedish avionics software development company. Four repositories are studied for the presence of TTD using expert interviews, semi-automated document analysis and automatic metric analysis. Results of the study provide initial support that the concept of TTD is applicable to GUI-based testware and show the presence of both TD items unique to GUI-based testware and items common to software. The implications of these results are that engineering best practices must be established for GUI-based testware to minimize TD interest.","","978-1-5090-3674-5","10.1109/ICSTW.2016.47","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7528970","Technical debt;Testware;GUI-based testing;Industrial case study","Companies;Complexity theory;Testing;Software;Interviews;Measurement;Graphical user interfaces","","7","","24","IEEE","4 Aug 2016","","","IEEE","IEEE Conferences"
"Comprehending the Use of Intelligent Techniques to Support Technical Debt Management","D. Albuquerque; E. Guimaraes; G. Tonin; M. Perkusich; H. Almeida; A. Perkusich","Federal University of Campina Grande (UFCG), Campina Grande, Brazil; The Pennsylvania State University, Malvern, Pennsylvania, USA; Federal University of Fronteira Sul (UFFS), Chapecó, Brazil; Federal University of Campina Grande (UFCG), Campina Grande, Brazil; Federal University of Campina Grande (UFCG), Campina Grande, Brazil; Federal University of Campina Grande (UFCG), Campina Grande, Brazil","2022 IEEE/ACM International Conference on Technical Debt (TechDebt)","27 Jun 2022","2022","","","21","30","Technical Debt (TD) refers to the consequences of taking shortcuts when developing software. Technical Debt Management (TDM) becomes complex since it relies on a decision process based on multiple and heterogeneous data, which are not straightforward to be synthesized. In this context, there is a promising opportunity to use Intelligent Techniques to support TDM activities since these techniques explore data for knowledge discovery, reasoning, learning, or supporting decision-making. Although these techniques can be used for improving TDM activities, there is no empirical study exploring this research area. This study aims to identify and analyze solutions based on Intelligent Techniques employed to sup-port TDM activities. A Systematic Mapping Study was performed, covering publications between 2010 and 2020. From 2276 extracted studies, we selected 111 unique studies. We found a positive trend in applying Intelligent Techniques to support TDM activities, being Machine Learning, Reasoning Under Uncertainty, and Natu-ral Language Processing the most recurrent ones. Identification, measurement, and monitoring were the more recurrent TDM ac-tivities, whereas Design, Code, and Architectural were the most frequently investigated TD types. Although the research area is up-and-coming, it is still in its infancy, and this study provides a baseline for future research.","","978-1-4503-9304-1","10.1145/3524843.3528097","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9804504","Technical Debt;Intelligent Techniques;Systematic Mapping Study;Technical Debt Management","Uncertainty;Systematics;Decision making;Machine learning;Time division multiplexing;Market research;Knowledge discovery","","2","","35","","27 Jun 2022","","","IEEE","IEEE Conferences"
"Hands-On Software Architecture with Java: Learn key architectural techniques and strategies to design efficient and elegant Java applications","G. Bonocore",NA,"Hands-On Software Architecture with Java: Learn key architectural techniques and strategies to design efficient and elegant Java applications","","2022","","","","","Build robust and scalable Java applications by learning how to implement every aspect of software architectureKey FeaturesUnderstand the fundamentals of software architecture and build production-grade applications in JavaMake smart architectural decisions with comprehensive coverage of various architectural approaches from SOA to microservicesGain an in-depth understanding of deployment considerations with cloud and CI/CD pipelinesBook DescriptionWell-written software architecture is the core of an efficient and scalable enterprise application. Java, the most widespread technology in current enterprises, provides complete toolkits to support the implementation of a well-designed architecture. This book starts with the fundamentals of architecture and takes you through the basic components of application architecture. You'll cover the different types of software architectural patterns and application integration patterns and learn about their most widespread implementation in Java. You'll then explore cloud-native architectures and best practices for enhancing existing applications to better suit a cloud-enabled world. Later, the book highlights some cross-cutting concerns and the importance of monitoring and tracing for planning the evolution of the software, foreseeing predictable maintenance, and troubleshooting. The book concludes with an analysis of the current status of software architectures in Java programming and offers insights into transforming your architecture to reduce technical debt. By the end of this software architecture book, you'll have acquired some of the most valuable and in-demand software architect skills to progress in your career.What you will learnUnderstand the importance of requirements engineering, including functional versus non-functional requirementsExplore design techniques such as domain-driven design, test-driven development (TDD), and behavior-driven developmentDiscover the mantras of selecting the right architectural patterns for modern applicationsExplore different integration patternsEnhance existing applications with essential cloud-native patterns and recommended practicesAddress cross-cutting considerations in enterprise applications regardless of architectural choices and application typeWho this book is forThis book is for Java software engineers who want to become software architects and learn everything a modern software architect needs to know. The book is also for software architects, technical leaders, vice presidents of software engineering, and CTOs looking to extend their knowledge and stay up to date with the latest developments in the field of software architecture.","","9781800206144","","","https://ieeexplore.ieee.org/xpl/ebooks/bookPdfWithBanner.jsp?fileName=10162259.pdf&bkn=10162258&pdfType=book","","","","","","","","27 Jun 2023","","","Packt Publishing","Packt Publishing eBooks"
"Identification of Refused Bequest Code Smells","E. Ligu; A. Chatzigeorgiou; T. Chaikalis; N. Ygeionomakis","Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece","2013 IEEE International Conference on Software Maintenance","2 Dec 2013","2013","","","392","395","Accumulated technical debt can be alleviated by means of refactoring application aiming at architectural improvement. A prerequisite for wide scale refactoring application is the automated identification of the corresponding refactoring opportunities, or code smells. One of the major architectural problems that has received limited attention is the so called 'Refused Bequest' which refers to inappropriate use of inheritance in object-oriented systems. This code smell occurs when subclasses do not take advantage of the inherited behavior, implying that replacement by delegation should be used instead. In this paper we propose a technique for the identification of Refused Bequest code smells whose major novelty lies in the intentional introduction of errors in the inherited methods. The essence of inheritance is evaluated by exercising the system's functionality through the corresponding unit tests in order to reveal whether inherited methods are actually employed by clients. Based on the results of this approach and other structural information, an indication of the smell strength on a 'thermometer' is obtained. The proposed approach has been implemented as an Eclipse plug in.","1063-6773","978-0-7695-4981-1","10.1109/ICSM.2013.55","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6676915","software maintenance;refactoring;code smell;Refused Bequest","Abstracts;Software maintenance;Europe;Educational institutions;Maintenance engineering;Software systems","","21","","11","IEEE","2 Dec 2013","","","IEEE","IEEE Conferences"
"Architecture-Based Quality Attribute Synergies and Conflicts","B. Boehm","National Research Tomsk State University, Tomsk, Russian Federation","2015 IEEE/ACM 2nd International Workshop on Software Architecture and Metrics","3 Aug 2015","2015","","","29","34","Large or critical software projects often identify particularly-critical quality attributes (QAs), often called non-functional requirements or ilities, and organize Integrated Product Teams (IPTs) to address them. Frequently, the resulting IPT solutions include architectural decisions that address the QA of interest, but seriously conflict with other QAs which are also important but less-well analyzed. These conflicts will often become major sources of significant technical debt and expensive architectural breakage to rectify. As the QA of interest also has synergies with other QAs, the rectification needs to be careful not to undo the synergies. This paper summarizes recent research to develop QA synergies and conflicts matrices that can be used by software system engineers to identify potential areas of concern in balancing a system's QAs.","","978-1-4673-7076-9","10.1109/SAM.2015.18","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7174846","quality attributes; non-functional requirements; ilities; synergies; conflicts; software architecture; architecture breakage; technical debt","Interoperability;Computer architecture;Software;Stakeholders;Reliability engineering;Security","","7","","8","IEEE","3 Aug 2015","","","IEEE","IEEE Conferences"
"The Perception of Architectural Smells in Industrial Practice","D. Sas; I. Pigazzini; P. Avgeriou; F. A. Fontana",University of Groningen; University of Milano–Bicocca; University of Groningen; University of Milano–Bicocca,"IEEE Software","25 Oct 2021","2021","38","6","35","41","Architectural technical debt (TD) is the most significant type of TD in industrial practice. Our goals in this study were to better understand the phenomenon of architectural smells, help practitioners better manage them, and offer relevant support to researchers.","1937-4194","","10.1109/MS.2021.3103664","H2020 European Institute of Innovation and Technology(grant numbers:780572); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9509940","","Maintenance engineering;Java;Companies;Reliability;Software testing;System recovery;Management;Costs","","2","","10","IEEE","10 Aug 2021","","","IEEE","IEEE Magazines"
"SPARTA: Security & Privacy Architecture Through Risk-Driven Threat Assessment","L. Sion; D. Van Landuyt; K. Yskout; W. Joosen","Imec-DistriNet, KU Leuven, Heverlee, Belgium; Imec-DistriNet, KU Leuven, Heverlee, Belgium; Imec-DistriNet, KU Leuven, Heverlee, Belgium; Imec-DistriNet, KU Leuven, Heverlee, Belgium","2018 IEEE International Conference on Software Architecture Companion (ICSA-C)","13 Aug 2018","2018","","","89","92","The development of secure and privacy-preserving software systems entails the continuous consideration of the security and privacy aspects of the system under development. While contemporary software development practices do support such a continuous approach towards software development, existing threat modeling activities are commonly executed as single-shot efforts leading to a single, historic, and quickly obsolete view on the security and privacy of the system. This disconnect leads to undetected new issues and wasted efforts on already resolved problems, effectively accruing technical debt. The presented SPARTA prototype facilitates the consideration of security and privacy by providing support for: (i) capturing security and privacy design decisions in a DFD-based architectural abstraction, (ii) continuous threat elicitation on this knowledge-enriched abstraction, and (iii) risk analysis of the elicited threats for prioritizing security and privacy efforts. By capturing and continuously assessing the impact of security and privacy design decisions on the elicited threats, the progress towards securing the system can be assessed and alternatives can be compared, taking into account past and present design decisions.","","978-1-5386-6585-5","10.1109/ICSA-C.2018.00032","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8432187","Security;Privacy;Threat modeling;Risk analysis;Secure design","Security;Privacy;Risk analysis;Analytical models;Tools;Monte Carlo methods;Data models","","26","","29","IEEE","13 Aug 2018","","","IEEE","IEEE Conferences"
"Compiling static software metrics for reliability and maintainability from GitHub repositories","J. Ludwig; S. Xu; F. Webber","Stottler Henke Associates, Inc., San Mateo, CA; Stottler Henke Associates, Inc., San Mateo, CA; Air Force Research Laboratory, WPAFB, OH","2017 IEEE International Conference on Systems, Man, and Cybernetics (SMC)","30 Nov 2017","2017","","","5","9","This paper identifies a small, essential set of static software code metrics linked to the software product quality characteristics of reliability and maintainability and to the most commonly identified sources of technical debt. A plug-in is created for the Understand code visualization and static analysis tool that calculates and aggregates the metrics. The plug-in produces a high-level interactive html report as well as developer-level information needed to address quality issues using Understand. A script makes use of Git, Understand, and the plug-in to compile results for a list of GitHub repositories into a single file. The primary contribution of this work is to describe an open-source plug-in to measure and visualize architectural complexity based on the propagation cost and core size metrics, which are not currently found in other tools. The plug-in should be useful to researchers and practitioners interested in these two metrics and as an expedient starting point to experimentation with metric collection and aggregation for groups of GitHub repositories. The plug-in was developed as a first step in an ongoing project aimed at applying case-based reasoning to the issue of software product quality.","","978-1-5386-1645-1","10.1109/SMC.2017.8122569","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8122569","software product quality;technical debt;reliability;maintainability;architecture;metrics;static code analysis","Measurement;Complexity theory;Software quality;Tools;Software reliability","","8","","27","IEEE","30 Nov 2017","","","IEEE","IEEE Conferences"
"A Position Study to Investigate Technical Debt Associated with Security Weaknesses","C. Izurieta; K. Kimball; D. Rice; T. Valentien","Montana State University Bozeman, MT, USA; Montana State University Bozeman, MT, USA; Georgia College & State University Milledgeville, GA, USA; Georgia Institute of Technology Atlanta, GA, USA","2018 IEEE/ACM International Conference on Technical Debt (TechDebt)","30 Dec 2018","2018","","","138","142","Context: Managing technical debt (TD) associated with potential security breaches found during design can lead to catching vulnerabilities (i.e., exploitable weaknesses) earlier in the software lifecycle; thus, anticipating TD principal and interest that can have decidedly negative impacts on businesses. Goal: To establish an approach to help assess TD associated with security weaknesses by leveraging the Common Weakness Enumeration (CWE) and its scoring mechanism, the Common Weakness Scoring System (CWSS). Method: We present a position study with a five-step approach employing the Quamoco quality model to operationalize the scoring of architectural CWEs. Results: We use static analysis to detect design level CWEs, calculate their CWSS scores, and provide a relative ranking of weaknesses that help practitioners identify the highest risks in an organization with a potential to impact TD. Conclusion: CWSS is a community agreed upon method that should be leveraged to help inform the ranking of security related TD items.","","978-1-4503-5713-5","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8595115","quality assurance;software quality;technical debt","Security;Software;Software measurement;Tools;Static analysis;Companies","","8","","24","","30 Dec 2018","","","IEEE","IEEE Conferences"
"Microservices smell detection through dynamic analysis","P. Bacchiega; I. Pigazzini; F. A. Fontana","University of Milano - Bicocca, Milano, Italy; University of Milano - Bicocca, Milano, Italy; University of Milano - Bicocca, Milano, Italy","2022 48th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)","16 Jan 2023","2022","","","290","293","The past few years saw the rise of microservices studies and best practices, along with wide industrial adoption of this architectural style. We now witness the birth of another challenging topic: microservices quality. Like other kinds of architectures, also microservices suffer from erosion and technical debt, whose symptoms can be the appearance of microservices smells, which impact negatively on the system’s quality, by hindering, for example, its maintainability. In this paper we propose a tool called Aroma, to reconstruct microservices architectures and detect microservices smells, based on the dynamic analysis of microservices execution traces. We describe the main features of the tool, the strategies adopted for microservice smells detection and the first preliminary experimentation.","","978-1-6654-6152-8","10.1109/SEAA56994.2022.00052","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10011206","Microservices architecture reconstruction;Microservices smells;Technical debt;Dynamic analysis;Graph representation","Microservice architectures;Computer architecture;Feature extraction;Best practices;Software engineering","","5","","16","IEEE","16 Jan 2023","","","IEEE","IEEE Conferences"
"GitHub, Technical Debt, Code Formatting, and More","J. C. Carver; J. Cabot; R. Capilla; H. Muccini",University of Alabama; Interdisciplinary Internet Institute; Rey Juan Carlos University of Madrid; University of L'Aquila,"IEEE Software","28 Mar 2017","2017","34","2","105","107","This issue's column reports on papers from the 19th International Conference on Model Driven Engineering Languages and Systems, the 2016 ACM SIGPLAN International Conference on Software Language Engineering, the 12th International ACM SIGSOFT Conference on the Quality of Software Architectures, and the 13th Working IEEE/IFIP Conference on Software Architecture. Topics discussed include GitHub and open source, technical debt in model-driven engineering, a universal code formatter, assuring architectural quality, and continuous architecting.","1937-4194","","10.1109/MS.2017.51","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7888414","GitHub;open source;UML;technical debt;code smells;model-driven engineering;code formatting;machine learning;AQAF;Architecture Quality Assurance Framework;AADL;Architecture Analysis and Design Language;architectural quality;continuous architecting;CAFFEA;Continuous Architecture Framework for Embedded and Agile Software Development;software engineering;software development","","","3","","","IEEE","28 Mar 2017","","","IEEE","IEEE Magazines"
"Condensing Architectural Knowledge from Unstructured Textual Media in Agile GSD Teams","G. Borrego","Facultad de Ciencias, Universidad Autónoma de Baja California, Ensenada, México","2016 IEEE 11th International Conference on Global Software Engineering Workshops (ICGSEW)","29 Sep 2016","2016","","","69","72","Agile Global Software Development (AGSD) is a reality, since nowadays software products are required to get into the market with more speed than before. This situation has pushed Global Software Development (GSD) companies to adopt lighter ways to develop software (Agile Software Development - ASD) to satisfy market demands. However, AGSD companies have encountered increased technical debt and architectural knowledge (AK) vaporization, mainly because the inherent differences between ASD and GSD, especially in documentation handling. This paper describes a research project in which it is proposed to exploit the AK that is recorded in unstructured textual electronic media (UTEM) generally used in AGSD, in order to decrease the problems of software evolution and maintenance, caused by a lack of adequate AK. Until now, the preliminary results of this research show that this approach could be feasible in AGSD environments.","2329-6313","978-1-5090-3625-7","10.1109/ICGSEW.2016.16","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7579489","agile global software development;architectural knowledge;unstructured textual media;architectural knowledge vaporization;technical debt;architectural knowledge condensation","Software;Documentation;Companies;Media;Maintenance engineering;Electronic mail;Collaboration","","1","","44","IEEE","29 Sep 2016","","","IEEE","IEEE Conferences"
"Risk Appetite in Architectural Decision-Making","A. Zalewski","Institute of Control and Computation Engineering, Warsaw University of Technology, Warsaw, Poland","2017 IEEE International Conference on Software Architecture Workshops (ICSAW)","26 Jun 2017","2017","","","149","152","This paper is an exploratory study on architects' attitudes towards risk and its influences on the architectural decision-making process. A classification of architects' attitude to risk-taking has been developed on the basis of Fowler's Technical Debt Quadrants. The core proposition of the paper is that the well-established concept of `risk appetite' can be equally well applied to characterise and classify architects' attitudes towards risk. This enables the aspects of the decision-making process that are influenced by architects' attitudes towards risks to be identified, and reveals what these influences are. It has been shown that the proposed classifications reflect many real-world situations.","","978-1-5090-4793-2","10.1109/ICSAW.2017.38","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7958473","risk;risk appetite;architecture decision-making","Decision making;Computer architecture;Software;Conferences;Risk management;Standards","","","","17","IEEE","26 Jun 2017","","","IEEE","IEEE Conferences"
"Towards Assessing Software Architecture Quality by Exploiting Code Smell Relations","F. A. Fontana; V. Ferme; M. Zanoni","Department of Informatics, Systems and Communication University of Milano-Bicocca, Milano, Italy; Faculty of Informatics University of Lugano (USI), Switzerland; Department of Informatics, Systems and Communication University of Milano-Bicocca, Milano, Italy","2015 IEEE/ACM 2nd International Workshop on Software Architecture and Metrics","3 Aug 2015","2015","","","1","7","We can evaluate software architecture quality using a plethora of metrics proposed in the literature, but interpreting and exploiting in the right way these metrics is not always a simple task. This is true for both fixing the right metric threshold values and determining the actions to be taken to improve the quality of the system. Instead of metrics, we can detect code or architectural anomalies that give us useful hints on the possible architecture degradation. In this paper, we focus our attention on the detection of code smells and in particular on their relations and co-occurrences, with the aim to evaluate technical debt in an architectural context. We start from the assumption that certain patterns of code anomalies tend to be better indicators of architectural degradation than simple metrics evaluation.","","978-1-4673-7076-9","10.1109/SAM.2015.8","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7174842","","Measurement;Couplings;Surgery;Cascading style sheets;Computer architecture;Software architecture;Degradation","","31","","26","IEEE","3 Aug 2015","","","IEEE","IEEE Conferences"
"Toward Design Decisions to Enable Deployability: Empirical Study of Three Projects Reaching for the Continuous Delivery Holy Grail","S. Bellomo; N. Ernst; R. Nord; R. Kazman","Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA; Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA; Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA; Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA","2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks","22 Sep 2014","2014","","","702","707","There is growing interest in continuous delivery practices to enable rapid and reliable deployment. While practices are important, we suggest architectural design decisions are equally important for projects to achieve goals such continuous integration (CI) build, automated testing and reduced deployment-cycle time. Architectural design decisions that conflict with deploy ability goals can impede the team's ability to achieve the desired state of deployment and may result in substantial technical debt. To explore this assertion, we interviewed three project teams striving to practicing continuous delivery. In this paper, we summarize examples of the deploy ability goals for each project as well as the architectural decisions that they have made to enable deploy ability. We present the deploy ability goals, design decisions, and deploy ability tactics collected and summarize the design tactics derived from the interviews in the form of an initial draft version hierarchical deploy ability tactic tree.","2158-3927","978-1-4799-2233-8","10.1109/DSN.2014.104","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6903628","deployability;continuous integration;continuous delivery;architecture tactic;test automation","Databases;Web services;Interviews;Testing;Computer architecture;Servers;Availability","","25","","15","IEEE","22 Sep 2014","","","IEEE","IEEE Conferences"
"Recover and RELAX: Concern-Oriented Software Architecture Recovery for Systems Development and Maintenance","D. Link; P. Behnamghader; R. Moazeni; B. Boehm","Center for Systems and Software Engineering, University of Southern California, Los Angeles, USA; Center for Systems and Software Engineering, University of Southern California, Los Angeles, USA; Computer Engineering Department, Santa Clara University, Santa Clara, USA; Center for Systems and Software Engineering, University of Southern California, Los Angeles, USA","2019 IEEE/ACM International Conference on Software and System Processes (ICSSP)","26 Aug 2019","2019","","","64","73","The stakeholders of a system are legitimately interested in whether and how its architecture reflects their respective concerns at each point of its development and maintenance processes. Having such knowledge available at all times would enable them to continually adjust their systems structure at each juncture and reduce the buildup of technical debt that can be hard to reduce once it has persisted over many iterations. Unfortunately, software systems often lack reliable and current documentation about their architecture. In order to remedy this situation, researchers have conceived a number of architectural recovery methods, some of them concern-oriented. However, the design choices forming the bases of most existing recovery methods make it so none of them have a complete set of desirable qualities for the purpose stated above. Tailoring a recovery to a system is either not possible or only through iterative experiments with numeric parameters. Furthermore, limitations in the scalability of the employed recovery algorithms make it prohibitive to apply the existing techniques to large systems. Finally, since several current recovery methods employ nondeterministic sampling, their inconsistent results do not lend themselves well to tracking a systems course over several versions, as needed by its stakeholders. RELAX (RELiable Architecture EXtraction), a new concern based recovery method that uses text classification, addresses these issues efficiently (1) by assembling the overall recovery result from smaller, independent parts, (2) basing it on an algorithm with linear time complexity and (3) being tailorable to the recovery of a single system or a sequence thereof through the selection of meaningfully named, semantic topics. An intuitive and informative architectural visualization rounds out RELAX's contributions. RELAX is illustrated on a number of existing open-source systems and compared to other recovery methods. Index Terms-software architecture, architectural change, software evolution, open source software, architecture recovery, software development management, software maintenance.","","978-1-7281-3393-5","10.1109/ICSSP.2019.00018","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8812871","software architecture, architectural change, software evolution, open source software, architecture recovery, software development management, software maintenance","Computer architecture;Stakeholders;Software architecture;Visualization;Maintenance engineering;Software systems;Documentation","","5","","43","IEEE","26 Aug 2019","","","IEEE","IEEE Conferences"
"A Case Study in Locating the Architectural Roots of Technical Debt","R. Kazman; Y. Cai; R. Mo; Q. Feng; L. Xiao; S. Haziyev; V. Fedak; A. Shapochka","SEU/CMU & U. of Hawaii, Honolulu, HI, USA; Drexel University, Philadelphia, PA, USA; Drexel University, Philadelphia, PA, USA; Drexel University, Philadelphia, PA, USA; Drexel University, Philadelphia, PA, USA; SoftServe Inc., Lviv, Ukraine; SoftServe Inc., Lviv, Ukraine; SoftServe Inc., Lviv, Ukraine","2015 IEEE/ACM 37th IEEE International Conference on Software Engineering","17 Aug 2015","2015","2","","179","188","Our recent research has shown that, in large-scale software systems, defective files seldom exist alone. They are usually architecturally connected, and their architectural structures exhibit significant design flaws which propagate bugginess among files. We call these flawed structures the architecture roots, a type of technical debt that incurs high maintenance penalties. Removing the architecture roots of bugginess requires refactoring, but the benefits of refactoring have historically been difficult for architects to quantify or justify. In this paper, we present a case study of identifying and quantifying such architecture debts in a large-scale industrial software project. Our approach is to model and analyze software architecture as a set of design rule spaces (DRSpaces). Using data extracted from the project's development artifacts, we were able to identify the files implicated in architecture flaws and suggest refactorings based on removing these flaws. Then we built economic models of the before and (predicted) after states, which gave the organization confidence that doing the refactorings made business sense, in terms of a handsome return on investment.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.146","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7202962","","Computer architecture;Software engineering;Business;History;Sonar detection;Microprocessors","","69","","33","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Visualising architectural dependencies","J. Brondum; L. Zhu","NICTA, University of New South Wales, Sydney, Australia; NICTA, University of New South Wales, Sydney, Australia","2012 Third International Workshop on Managing Technical Debt (MTD)","28 Jun 2012","2012","","","7","14","Visibility of technical debt is critical. A lack thereof can lead to significant problems without adequate visibility as part of the system level decision-making processes [2]. Current approaches for analysing and monitoring architecture related debt are based on dependency analysis to detect code level violations of the software architecture [2,3,6]. However, heterogeneous environments with several systems constructed using OTS, and/or several programming languages may not offer sufficient code visibility. Other limiting factors include legal contracts, Intellectual Property Rights, and just very large systems. Secondly, the complexity of a software dependency is often greater than simple structural dependencies, including; multi-dimensional properties (as argued by [10]); behavioural dependencies [5,9]; and `implicit' dependencies (i.e., dependency inter-relatedness [11]). This paper proposes a simple modelling approach for visualising dependency relationships as an extension of the current approaches, while supporting complex dependencies. The model can be built using existing dependency analysis and general architectural knowledge; thus is better suited for heterogeneous environments. We demonstrate the proposed modelling using an exemplar, and two field case studies.","","978-1-4673-1749-8","10.1109/MTD.2012.6226003","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6226003","Software Architecture;Architectural Dependency Analysis;Architectural Debt","","","14","","15","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"Estimating and Quantifying the Benefits of Refactoring to Improve a Component Modularity: A Case Study","A. Martini; E. Sikander; N. Medlani","Software Engineering Division, Chalmers University of Technology, Gothenburg, Sweden; Software Engineering Division, Chalmers University of Technology, Gothenburg, Sweden; Software Engineering Division, Chalmers University of Technology, Gothenburg, Sweden","2016 42th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)","18 Oct 2016","2016","","","92","99","In recent years, research and industry's attention has been focused on maintaining a system that would both decrease time to market in the short term and assure a sustainable feature output and smooth maintenance operations in the long run. A related phenomenon has been identified in Architectural Technical Debt: if the system architecture is sub-optimal for long-term business goals, it needs to be refactored. A key property of the system assuring long-term goals consists on modularity, or else the ability to decouple different components: such property allows the product to be evolved without costly changes pervading the whole system. However, understanding the business benefits of refactoring to achieve modularity is not trivial, especially for large refactorings involving substantial architectural changes. We have conducted a case study in a large company, analyzing a case of refactoring a component to achieve modularity. We report a comparative study of a refactored against a non-refactored component. We found that the modularization would be repaid in several months of development and maintenance. We present a method to calculate the effort saved by the modularization and an equation for calculating and quantifying the development and maintenance benefits of refactoring.","2376-9505","978-1-5090-2820-7","10.1109/SEAA.2016.48","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7592783","Software Management;Refactoring;Estimation;Technical Debt;Modularization;Software Architecture","Complexity theory;Maintenance engineering;Software;Companies;Interviews;Stakeholders","","7","","11","IEEE","18 Oct 2016","","","IEEE","IEEE Conferences"
"Applying Social Network Analysis Techniques to Architectural Smell Prediction","A. Tommasel","ISISTAN, CONICET-UNICEN, Argentina","2019 IEEE International Conference on Software Architecture Companion (ICSA-C)","13 May 2019","2019","","","254","261","As a software system evolves, the amount and complexity of the interactions amongst its components is likely to increase, which negatively affects the system design structure and also its quality. For instance, certain modules might become coupled due to a new user feature being added or to suboptimal development decisions. Design degradation symptoms are often related to high coupling and unwanted dependencies, such as: cyclic dependencies or violations to design rules, amongst other architectural smells. Thus, the early detection of such symptoms is important for architects to: i) anticipate dependency-related design problems in different parts of the system, ii) assess possible situations of technical debt, and iii) proactively look for solutions to preserve the quality of the system. Although there are approaches that analyse design dependencies in code bases and flag smell occurrences, very few of them have dealt with the prediction of dependency relations amongst software components. This research hypothesises that a predictive approach can warn architects about dependency-related problems before they appear. To this end, a particular graph-based approach is social networks analysis (SNA), which has been used for modelling both nature and human phenomena. Specifically, SNA techniques can predict links that do not yet exist between pairs of nodes in a network. SNA applications have shown evidence that the topological features of dependency graphs can reveal interesting properties of the software system under analysis. Nonetheless, SNA techniques have not yet been extensively exploited in the Software Architecture community. In this context, the question that motivates this research is to what extent SNA can leverage on information from a software design (and its evolution over time) for inferring new dependencies and likely configurations of architectural smells out of those dependencies.","","978-1-7281-1876-5","10.1109/ICSA-C.2019.00053","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8712369","","Measurement;Social networking (online);Computer architecture;Software architecture;Software systems;Software design","","1","","30","IEEE","13 May 2019","","","IEEE","IEEE Conferences"
"Reducing Incidents in Microservices by Repaying Architectural Technical Debt","S. S. de Toledo; A. Martini; D. I. K. Sjøberg; A. Przybyszewska; J. S. Frandsen","Dept. of Informatics, University of Oslo, Oslo, Norway; Dept. of Informatics, University of Oslo, Oslo, Norway; Dept. of Informatics, University of Oslo, Oslo, Norway; Dept. of Computer Science, IT University of Copenhagen, Copenhagen, Denmark; NA","2021 47th Euromicro Conference on Software Engineering and Advanced Applications (SEAA)","27 Oct 2021","2021","","","196","205","Architectural technical debt (ATD) may create a substantial extra effort in software development, which is called interest. There is little evidence about whether repaying ATD in microservices reduces such interest. Objectives: We wanted to conduct a first study on investigating the effect of removing ATD on the occurrence of incidents in a microservices architecture. Method: We conducted a quantitative and qualitative case study of a project with approximately 1000 microservices in a large, international financing services company. We measured and compared the number of software incidents of different categories before and after repaying ATD. Results: The total number of incidents was reduced by 84%, and the numbers of critical- and high-priority incidents were both reduced by approximately 90% after the architectural refactoring. The number of incidents in the architecture with the ATD was mainly constant over time, but we observed a slight increase of low priority incidents related to inaccessibility and the environment in the architecture without the ATD. Conclusion: This study shows evidence that refactoring ATDs, such as lack of communication standards, poor management of dead-letter queues, and the use of inadequate technologies in microservices, reduces the number of critical- and high-priority incidents and, thus, part of its interest, although some low priority incidents may increase.","","978-1-6654-2705-0","10.1109/SEAA53835.2021.00033","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9582573","Technical Debt;Architecture;Microservices;Case Study","Computer architecture;Companies;Software;Software measurement;Software engineering;Communication standards","","","","21","IEEE","27 Oct 2021","","","IEEE","IEEE Conferences"
"Architectural Technical Debt Identification: The Research Landscape","R. Verdecchia; I. Malavolta; P. Lago","Vrije Universiteit, Amsterdam, The Netherlands; Vrije Universiteit, Amsterdam, The Netherlands; Vrije Universiteit, Amsterdam, The Netherlands","2018 IEEE/ACM International Conference on Technical Debt (TechDebt)","30 Dec 2018","2018","","","11","20","Architectural Technical Debt (ATD) regards sub-optimal design decisions that bring short-term benefits to the cost of long-term gradual deterioration of the quality of the architecture of a software system. The identification of ATD strongly in uences the technical and economic sustainability of software systems and is attracting growing interest in the scientific community. During the years several approaches for ATD identification have been conceived, each of them addressing ATD from di erent perspectives and with heterogeneous characteristics. In this paper we apply the systematic mapping study methodology for identifying, classifying, and evaluating the state of the art on ATD identification from the following three perspectives: publication trends, characteristics, and potential for industrial adoption. Speci cally, starting from a set of 509 potentially relevant studies, we systematically selected 47 primary studies and analyzed them according to a rigorously-de ned classification framework. The analysis of the obtained results supports both researchers and practitioners by providing (i) an assessment of current research trends and gaps in ATD identification, (ii) a solid foundation for understanding existing (and future) research on ATD identification, and (iii) a rigorous evaluation of its potential for industrial adoption.","","978-1-4503-5713-5","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8595095","Technical debt;Software architecture;Systematic mapping study","Market research;Systematics;Software architecture;Focusing;Object recognition;Software systems","","8","","30","","30 Dec 2018","","","IEEE","IEEE Conferences"
"Architectural Technical Debt Identification Based on Architecture Decisions and Change Scenarios","Z. Li; P. Liang; P. Avgeriou","Department of Mathematics and Computing Science, University of Groningen, Groningen, The Netherlands; State Key Lab of Software Engineering, School of Computer Wuhan University, Wuhan, China; Department of Mathematics and Computing Science, University of Groningen, Groningen, The Netherlands","2015 12th Working IEEE/IFIP Conference on Software Architecture","16 Jul 2015","2015","","","65","74","Architectural technical debt (ATD) is incurred by design decisions that intentionally or unintentionally compromise system-wide quality attributes, particularly maintainability and evolvability. ATD is harmful to the system's long-term health, thus it needs to be identified for further management. However, existing ATD identification approaches are mainly based on source code analysis and thus suffer from certain shortcomings: they can only identify issues at the system implementation, they can only be employed after the systems is implemented in code, they lack a mechanism to confirm whether the potential ATD identified is real ATD or not. To address these issues, we proposed an ATD identification approach based on architecture decisions and change scenarios. To evaluate the effectiveness and usability of this approach, we conducted a case study with an information system in a large telecommunications company. The results show that the proposed approach is useful and easy to use, and it supports release planning and ATD interest measurement.","","978-1-4799-1922-2","10.1109/WICSA.2015.19","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7158505","Architectural technical debt;architectural technical debt identification;architecture decision;change scenario","Computer architecture;Software systems;Planning;Interviews;Telecommunications;Usability","","24","","22","IEEE","16 Jul 2015","","","IEEE","IEEE Conferences"
"Architectural Technical Debt in Embedded Systems","A. Martini; J. Bosch",NA; NA,"Systems Engineering in the Fourth Industrial Revolution: Big Data, Novel Technologies, and Modern Systems Engineering","","2020","","","77","103","Agile software development (ASD) has been employed effectively in the development of embedded systems, contributing to speeding up the delivery of value to the customers. However, some obstacles have been found, limiting the application of ASD to such a domain. This chapter focuses on one such challenges, the degradation of the system architecture over time, which is called, in literature, Architectural Technical Debt (ATD). Software engineering is an individual activity and the causes for ATD accumulation can be related to suboptimal decision taken by individual employees. New employees as well are more subjected to accumulating ATD due to the natural noncomplete understanding of the architecture and patterns. The chapter summarizes the causes, trends, consequences, and possible solutions related to the management of ATD. The results are all based on a strong collaboration with several software‐intensive systems industries located in northern Europe and, consequently, relevant to all Industry 4.0 companies.","","9781119513940","10.1002/9781119513957.ch4","","https://ieeexplore.ieee.org/xpl/ebooks/bookPdfWithBanner.jsp?fileName=9822620.pdf&bkn=9820812&pdfType=chapter","","Companies;Computer architecture;Software;Systems architecture;Embedded systems;Teamwork;Systematics","","1","","","","12 Jul 2022","","","Wiley","Wiley Data and Cybersecurity eBook Chapters"
"Architectural Archipelagos: Technical Debt in Long-Lived Software Research Platforms","M. S. Laser; D. Minh Le; J. Garcia; N. Medvidović","University Of Southern California; Bloomberg LP; University of California, Irvine; University Of Southern California","2021 IEEE/ACM International Conference on Technical Debt (TechDebt)","25 Jun 2021","2021","","","94","98","This paper identifies a model of software evolution that is prevalent in large, long-lived academic research tool suites (3L-ARTS). This model results in an ""archipelago"" of related but haphazardly organized architectural ""islands"", and inherently induces technical debt. We illustrate the archipelago model with examples from two 3L-ARTS archipelagos identified in literature.","","978-1-6654-1405-0","10.1109/TechDebt52882.2021.00019","National Science Foundation; Office of Naval Research; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9462988","Software research;proof-of-concept;archipelago","Tools;Software","","","","43","IEEE","25 Jun 2021","","","IEEE","IEEE Conferences"
"[Front matter]","",,"2015 IEEE 7th International Workshop on Managing Technical Debt (MTD)","23 Nov 2015","2015","","","i","ii","The following topics are dealt with: technical debt management; code debt; architectural debt; software refactoring; and software testing.","","978-1-4673-7378-4","10.1109/MTD.2015.7332614","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7332614","","","","","","","IEEE","23 Nov 2015","","","IEEE","IEEE Conferences"
"Table of contents","",,"2017 IEEE International Conference on Software Architecture (ICSA)","18 May 2017","2017","","","v","viii","The following topics are dealt with: microservices; cloud computing; Web applications; security of data; architectural knowledge; collaborative design; decision making; software quality; technical debt; continuous evolution; automotives; cyber physical systems; CPS; Internet of Things; IoT; traceability; and block chain.","","978-1-5090-5729-0","10.1109/ICSA.2017.9","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7930187","","","","","","","IEEE","18 May 2017","","","IEEE","IEEE Conferences"
