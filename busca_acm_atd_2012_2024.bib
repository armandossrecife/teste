# busca de 2012 até 2024 com a palavra chave: "Architectural Technical Debt"
@inproceedings{10.1145/2889160.2889224,
author = {Martini, Antonio and Bosch, Jan},
title = {An empirically developed method to aid decisions on architectural technical debt refactoring: AnaConDebt},
year = {2016},
isbn = {9781450342056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2889160.2889224},
doi = {10.1145/2889160.2889224},
abstract = {Architectural Technical Debt is regarded as sub-optimal architectural solutions that need to be refactored in order to avoid the payment of a costly interest in the future. However, decisions on if and when to refactor architecture are extremely important and difficult to take, since changing software at the architectural level is quite expensive. Therefore it is important, for software organizations, to have methods and tools that aid architects and managers to understand if Architecture Technical Debt will generate a costly and growing interest to be paid or not. Current knowledge, especially empirically developed and evaluated, is quite scarce. In this paper we developed and evaluated a method, AnaConDebt, by analyzing, together with several practitioners, 12 existing cases of Architecture Debt in 6 companies. The method has been refined several times in order to be useful and effective in practice. We also report the evaluation of the method with a final case, for which we present anonymized results and subsequent refactoring decisions. The method consists of several components that need to be analyzed, combining the theoretical Technical Debt framework and the practical experience of the practitioners, in order to identify the key factors involved in the growth of interest. The output of the method shows summarized indicators that visualizes the factors in a useful way for the stakeholders. This analysis aids the practitioners in deciding on if and when to refactor Architectural Technical Debt items. The method has been evaluated and has been proven useful to support the architects into systematically analyze and decide upon a case.},
booktitle = {Proceedings of the 38th International Conference on Software Engineering Companion},
pages = {31–40},
numpages = {10},
keywords = {architectural technical debt, decision making, design research, empirical study, estimation, method, refactoring},
location = {Austin, Texas},
series = {ICSE '16}
}

@inproceedings{10.1145/2602576.2602581,
author = {Li, Zengyang and Liang, Peng and Avgeriou, Paris and Guelfi, Nicolas and Ampatzoglou, Apostolos},
title = {An empirical investigation of modularity metrics for indicating architectural technical debt},
year = {2014},
isbn = {9781450325769},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2602576.2602581},
doi = {10.1145/2602576.2602581},
abstract = {Architectural technical debt (ATD) is incurred by design decisions that consciously or unconsciously compromise system-wide quality attributes, particularly maintainability and evolvability. ATD needs to be identified and measured, so that it can be monitored and eventually repaid, when appropriate. In practice, ATD is difficult to identify and measure, since ATD does not yield observable behaviors to end users. One indicator of ATD, is the average number of modified components per commit (ANMCC): a higher ANMCC indicates more ATD in a software system. However, it is difficult and sometimes impossible to calculate ANMCC, because the data (i.e., the log of commits) are not always available. In this work, we propose to use software modularity metrics, which can be directly calculated based on source code, as a substitute of ANMCC to indicate ATD. We validate the correlation between ANMCC and modularity metrics through a holistic multiple case study on thirteen open source software projects. The results of this study suggest that two modularity metrics, namely Index of Package Changing Impact (IPCI) and Index of Package Goal Focus (IPGF), have significant correlation with ANMCC, and therefore can be used as alternative ATD indicators.},
booktitle = {Proceedings of the 10th International ACM Sigsoft Conference on Quality of Software Architectures},
pages = {119–128},
numpages = {10},
keywords = {architectural technical debt, commit, modularity metric, software architecture},
location = {Marcq-en-Bareul, France},
series = {QoSA '14}
}

@inproceedings{10.1145/3194164.3194176,
author = {Verdecchia, Roberto and Malavolta, Ivano and Lago, Patricia},
title = {Architectural technical debt identification: the research landscape},
year = {2018},
isbn = {9781450357135},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3194164.3194176},
doi = {10.1145/3194164.3194176},
abstract = {Architectural Technical Debt (ATD) regards sub-optimal design decisions that bring short-term benefits to the cost of long-term gradual deterioration of the quality of the architecture of a software system. The identification of ATD strongly influences the technical and economic sustainability of software systems and is attracting growing interest in the scientific community. During the years several approaches for ATD identification have been conceived, each of them addressing ATD from different perspectives and with heterogeneous characteristics.In this paper we apply the systematic mapping study methodology for identifying, classifying, and evaluating the state of the art on ATD identification from the following three perspectives: publication trends, characteristics, and potential for industrial adoption. Specifically, starting from a set of 509 potentially relevant studies, we systematically selected 47 primary studies and analyzed them according to a rigorously-defined classification framework.The analysis of the obtained results supports both researchers and practitioners by providing (i) an assessment of current research trends and gaps in ATD identification, (ii) a solid foundation for understanding existing (and future) research on ATD identification, and (iii) a rigorous evaluation of its potential for industrial adoption.},
booktitle = {Proceedings of the 2018 International Conference on Technical Debt},
pages = {11–20},
numpages = {10},
keywords = {software architecture, systematic mapping study, technical debt},
location = {Gothenburg, Sweden},
series = {TechDebt '18}
}

@inproceedings{10.1145/3197231.3198442,
author = {Verdecchia, Roberto},
title = {Identifying architectural technical debt in Android applications through automated compliance checking},
year = {2018},
isbn = {9781450357128},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3197231.3198442},
doi = {10.1145/3197231.3198442},
abstract = {By considering the fast pace at which mobile applications need to evolve, Architectural Technical Debt results to be a crucial yet implicit factor of success. In this research we present an approach to automatically identify Architectural Technical Debt in Android applications. The approach takes advantage of architectural guidelines extraction and modeling, architecture reverse engineering, and compliance checking. As future work, we plan to fully automate the process and empirically evaluate it via large-scale experiments.},
booktitle = {Proceedings of the 5th International Conference on Mobile Software Engineering and Systems},
pages = {35–36},
numpages = {2},
keywords = {Android, compliance checking, software architecture, technical debt},
location = {Gothenburg, Sweden},
series = {MOBILESoft '18}
}

@inproceedings{10.1109/TechDebt.2019.00025,
author = {P\'{e}rez, Boris and Correal, Dar\'{\i}o and Astudillo, Hern\'{a}n},
title = {A proposed model-driven approach to manage architectural technical debt life cycle},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/TechDebt.2019.00025},
doi = {10.1109/TechDebt.2019.00025},
abstract = {Architectural Technical Debt (ATD) is a metaphor used to describe consciously decisions taken by software architects to accomplish short-term goals but possibly negatively affecting the long-term health of the system. However, difficulties arise when repayment strategies are defined because software architects need to be aware of the consequences of these strategies over others decisions in the software architecture. This article proposes REBEL, a semi-automated model-driven approach that exploits natural language processing, machine learning and model checking techniques on heterogeneous project artifacts to build a model that allows to locate and visualize the impact produced by the consciously injected ATD and its repayment strategy on the other architectural decisions. The technique is illustrated with a data analytics project in Colombia where software architects are unaware of the consequences of the repayment strategies. This proposal seeks to support teams of architects to make explicit the current and future impact of the ATD injected as a result of decisions taken, focusing on the architectural level rather than code level.},
booktitle = {Proceedings of the Second International Conference on Technical Debt},
pages = {73–77},
numpages = {5},
keywords = {architectural technical debt, architectural technical debt management, model-driven architecture, software architecture},
location = {Montreal, Quebec, Canada},
series = {TechDebt '19}
}

@inproceedings{10.1109/TechDebt.2019.00014,
author = {Hanssen, Geir Kjetil and Brataas, Gunnar and Martini, Antonio},
title = {Identifying scalability debt in open systems},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/TechDebt.2019.00014},
doi = {10.1109/TechDebt.2019.00014},
abstract = {Architectural technical debt can be generated by changes in the business and the environment of an organization. In this paper, we emphasize the change in scalability requirements due to new regulations. Scalability is the ability of a system to handle an increased workload. For complex systems that are abruptly exposed via open interfaces and hence a greater workload, the scalability requirements may quickly increase, leading to technical debt. We term this scalability debt. This paper describes scalability triage, a lightweight, novel technique for identifying scalability threats as a form of technical debt. We illustrate this technique with an open banking case from a large software organization. Open banking is partly caused by the new European PSD2 regulative that enforce banks to open interfaces to unknown third-party actors. Banking systems are well-established, mature systems. However, with the advent of open banking and PSD2, the workload may quickly rocket. This leads to tougher scalability requirements and accumulated architectural debt, despite previously sound architectural decisions. Using scalability triage, such risks may be identified fast. It will then be possible to prevent this form of technical debt with timely reengineering.},
booktitle = {Proceedings of the Second International Conference on Technical Debt},
pages = {48–52},
numpages = {5},
keywords = {agile development, open banking, scalability requirements, scalability triage},
location = {Montreal, Quebec, Canada},
series = {TechDebt '19}
}

@inproceedings{10.1145/3437120.3437292,
author = {Maikantis, Theodoros and Tsintzira, Angeliki-Agathi and Ampatzoglou, Apostolos and Arvanitou, Elvira-Maria and Chatzigeorgiou, Alexander and Stamelos, Ioannis and Bibi, Stamatia and Deligiannis, Ignatios},
title = {Software Architecture Reconstruction via a Genetic Algorithm: Applying the Move Class Refactoring},
year = {2021},
isbn = {9781450388979},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3437120.3437292},
doi = {10.1145/3437120.3437292},
abstract = {Modularity is one of the four key principles of software design and architecture. According to this principle, software should be organized into modules that are tightly linked internally (high cohesion), whereas at the same time as independent from other modules as possible (low coupling). However, in practice, this principle is violated due to poor architecting design decisions, lack of time, or coding shortcuts, leading to a phenomenon termed as architectural technical debt (ATD). To alleviate this problem (lack of architectural modularity), the most common solution is the application of a software refactoring, namely Move Class—i.e., moving classes (the core artifact in object-oriented systems) from one module to another. To identify Move Class refactoring opportunities, we employ a search-based optimization process, relying on optimization metrics, through which optimal moves are derived. Given the extensive search space required for applying a brute-force search strategy, in this paper, we propose the use of a genetic algorithm that re-arranges existing software classes into existing or new modules (software packages in Java, or folders in C++). To validate the usefulness of the proposed refactorings, we performed an industrial case study on three projects (from the Aviation, Healthcare, and Manufacturing application domains). The results of the study indicate that the proposed architecture reconstruction is able to improve modularity, improving both coupling and cohesion. The obtained results can be useful to practitioners through an open source tool; whereas at the same point, they open interesting future work directions.},
booktitle = {Proceedings of the 24th Pan-Hellenic Conference on Informatics},
pages = {135–139},
numpages = {5},
location = {Athens, Greece},
series = {PCI '20}
}

@inproceedings{10.1145/3084100.3084105,
author = {Aaramaa, Sanja and Dasanayake, Sandun and Oivo, Markku and Markkula, Jouni and Saukkonen, Samuli},
title = {Requirements volatility in software architecture design: an exploratory case study},
year = {2017},
isbn = {9781450352703},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3084100.3084105},
doi = {10.1145/3084100.3084105},
abstract = {Requirements volatility is a major issue in software (SW) development, causing problems such as project delays and cost overruns. Even though there is a considerable amount of research related to requirement volatility, the majority of it is inclined toward project management aspects. The relationship between SW architecture design and requirements volatility has not been researched widely, even though changing requirements may for example lead to higher defect density during testing. An exploratory case study was conducted to study how requirements volatility affects SW architecture design. Fifteen semi-structured, thematic interviews were conducted in the case company, which provides the selection of software products for business customers and consumers. The research revealed the factors, such as requirements uncertainty and dynamic business environment, causing requirements volatility in the case company. The study identified the challenges that requirements volatility posed to SW architecture design, including scheduling and architectural technical debt. In addition, this study discusses means of mitigating the factors that cause requirements volatility and addressing the challenges posed by requirements volatility. SW architects are strongly influenced by requirement volatility. Thus understanding the factors causing requirements volatility as well as means to mitigate the challenges has high industrial relevance.},
booktitle = {Proceedings of the 2017 International Conference on Software and System Process},
pages = {40–49},
numpages = {10},
keywords = {Requirement management, software architecture},
location = {Paris, France},
series = {ICSSP 2017}
}

@inproceedings{10.1145/3613372.3613399,
author = {Sousa, Armando and Rocha, Lincoln and Britto, Ricardo},
title = {Architectural Technical Debt - A Systematic Mapping Study},
year = {2023},
isbn = {9798400707872},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3613372.3613399},
doi = {10.1145/3613372.3613399},
abstract = {Architectural Technical Debt (ATD) is one of the leading Technical Debt (TD) that causes more impact in maintaining and evolving complex software systems. We conduct a Systematic Mapping Study (SMS) to discover the main aspects of identifying and monitoring ATD items to help determine what the community has been studying about it in the last ten years. We evaluated 70 studies dating from 2012 to 2022. We find out the main types of ATD, how to measure and monitor ATD, which techniques and methods stand out in this area, the most used tools, and directions on how to calculate the cost of paying for ATD items. The results of this mapping study can help identify points that still require investigations on identifying, monitoring, and calculating the effort to fix ATD items. Furthermore, we have proposed a roadmap to aid managing Architectural Technical Debt, which provides guidance for identifying and monitoring ATD items in software systems.},
booktitle = {Proceedings of the XXXVII Brazilian Symposium on Software Engineering},
pages = {196–205},
numpages = {10},
keywords = {Architectural Technical Debt, Large-scale Software Systems, Software Maintenance and Evolution},
location = {<conf-loc>, <city>Campo Grande</city>, <country>Brazil</country>, </conf-loc>},
series = {SBES '23}
}

@article{10.1145/3127360.3127372,
author = {Fontana, Francesca Arcelli and Chatzigeorgiou, Alexander and Trumler, Wolfgang and Izurieta, Clemente and Avgeriou, Paris and Nord, Robert L.},
title = {Technical Debt in Agile Development: Report on the Ninth Workshop on Managing Technical Debt (MTD 2017)},
year = {2017},
issue_date = {July 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {42},
number = {3},
issn = {0163-5948},
url = {https://doi.org/10.1145/3127360.3127372},
doi = {10.1145/3127360.3127372},
abstract = {We report on the Ninth International Workshop on Managing Technical Debt, collocated with the 18th International Conference on Agile Software Development (XP 2017) in Cologne. The technical debt research community continues to expand through collaborations of industry, tool vendors, and academia. The theme of this year's workshop was on technical debt in agile development. Presentations and discussion centered on the topics: technical debt at the code level, architectural technical debt assessment, agile approaches and their impact on technical debt management, and selling the business case of technical debt management.},
journal = {SIGSOFT Softw. Eng. Notes},
month = {sep},
pages = {18–21},
numpages = {4},
keywords = {Technical debt, agile development, software analytics, software economics, software evolution, software quality}
}

@inproceedings{10.1145/3555228.3555270,
author = {Damaceno, Katia and Nakagawa, Elisa and Braga, Rosana},
title = {Towards an Understanding of Technical Debt in Reference Architectures},
year = {2022},
isbn = {9781450397353},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3555228.3555270},
doi = {10.1145/3555228.3555270},
abstract = {Reference architectures refer to a special type of software architecture that has supported the development, evolution, and standardization of software systems in several critical domains. However, important decisions made while designing a reference architecture can lead to technical debt (TD). Even though the academy is investing efforts in the last decade to understand the problems implied by TD in the architectural level (known as architectural technical debt - ATD), it has not been addressed in the level above, i.e., in the reference architecture level. This paper introduces an understanding of TD in reference architectures and, through a systematized research method, proposes a definition for reference architecture technical debt (RATD) and its corresponding conceptual model. RATD could draw the attention from the community about the need of managing architectural debts found in most reference architectures.},
booktitle = {Proceedings of the XXXVI Brazilian Symposium on Software Engineering},
pages = {257–262},
numpages = {6},
keywords = {reference architecture, software architecture, technical debt},
location = {<conf-loc>, <city>Virtual Event</city>, <country>Brazil</country>, </conf-loc>},
series = {SBES '22}
}

